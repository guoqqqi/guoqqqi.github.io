{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/TKL/source/css/all.styl","path":"css/all.styl","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/animate.css","path":"css/animate.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/animsition.min.css","path":"css/animsition.min.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/flexslider.css","path":"css/flexslider.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/iconList.css","path":"css/iconList.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/ie8.css","path":"css/ie8.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/screen.css","path":"css/screen.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/slidebars.min.css","path":"css/slidebars.min.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/css/syntax.styl","path":"css/syntax.styl","modified":0,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.eot","path":"fonts/icons.eot","modified":0,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.svg","path":"fonts/icons.svg","modified":0,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.ttf","path":"fonts/icons.ttf","modified":0,"renderable":1},{"_id":"themes/TKL/source/fonts/icons.woff","path":"fonts/icons.woff","modified":0,"renderable":1},{"_id":"themes/TKL/source/fonts/opensans.woff","path":"fonts/opensans.woff","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/arta.css","path":"highlightjs/arta.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/ascetic.css","path":"highlightjs/ascetic.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/brown_paper.css","path":"highlightjs/brown_paper.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/brown_papersq.png","path":"highlightjs/brown_papersq.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/dark.css","path":"highlightjs/dark.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/default.css","path":"highlightjs/default.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/docco.css","path":"highlightjs/docco.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/far.css","path":"highlightjs/far.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/foundation.css","path":"highlightjs/foundation.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/github.css","path":"highlightjs/github.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/googlecode.css","path":"highlightjs/googlecode.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/ir_black.css","path":"highlightjs/ir_black.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/magula.css","path":"highlightjs/magula.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/mono-blue.css","path":"highlightjs/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/monokai.css","path":"highlightjs/monokai.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/obsidian.css","path":"highlightjs/obsidian.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/pojoaque.css","path":"highlightjs/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/pojoaque.jpg","path":"highlightjs/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/monokai_sublime.css","path":"highlightjs/monokai_sublime.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/railscasts.css","path":"highlightjs/railscasts.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/idea.css","path":"highlightjs/idea.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/school_book.css","path":"highlightjs/school_book.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/rainbow.css","path":"highlightjs/rainbow.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/solarized_dark.css","path":"highlightjs/solarized_dark.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/sunburst.css","path":"highlightjs/sunburst.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/solarized_light.css","path":"highlightjs/solarized_light.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/school_book.png","path":"highlightjs/school_book.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-blue.css","path":"highlightjs/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-bright.css","path":"highlightjs/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night.css","path":"highlightjs/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-eighties.css","path":"highlightjs/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/tomorrow.css","path":"highlightjs/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/vs.css","path":"highlightjs/vs.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/zenburn.css","path":"highlightjs/zenburn.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/highlightjs/xcode.css","path":"highlightjs/xcode.css","modified":0,"renderable":1},{"_id":"themes/TKL/source/img/1.jpg","path":"img/1.jpg","modified":0,"renderable":1},{"_id":"themes/TKL/source/img/bg_img.jpg","path":"img/bg_img.jpg","modified":0,"renderable":1},{"_id":"themes/TKL/source/img/blog.png","path":"img/blog.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/img/close.png","path":"img/close.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/TKL/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/html5shiv.min.js","path":"js/html5shiv.min.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/jquery-1.11.1.min.js","path":"js/jquery-1.11.1.min.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/jquery.ajaxchimp.min.js","path":"js/jquery.ajaxchimp.min.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/jquery.flexslider-min.js","path":"js/jquery.flexslider-min.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/plugins.min.js","path":"js/plugins.min.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/scripts.js","path":"js/scripts.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/ziploader.js","path":"js/ziploader.js","modified":0,"renderable":1},{"_id":"themes/TKL/source/js/respond.min.js","path":"js/respond.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2021-2-12.md","hash":"c42784ddded6756f94f06889607c841e5e4a51ee","modified":1641533954008},{"_id":"source/_posts/2020-11-11.md","hash":"2230c04c493662db217f273cfdf40d888f442f72","modified":1641533934120},{"_id":"source/_posts/2020-10-28.md","hash":"1392cddb260c5da31c3fa2c7766829ae14f77d0f","modified":1641533924929},{"_id":"source/_posts/2021-3-7.md","hash":"84e58236b0d0c2c6ab6b7a101e03cfe5b0e75fcd","modified":1641533962854},{"_id":"source/_posts/2021-8-7.md","hash":"11da1d6e68f2cadb624b3f6f3740638de8c98caa","modified":1641533978765},{"_id":"source/_posts/2021-6-28.md","hash":"67939467f843d174e26034eb8650df4587f1f4a2","modified":1641533970825},{"_id":"source/_posts/2021-1-30.md","hash":"7460583175ea7f6c004d4f6c3527762591839d9d","modified":1641533946153},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1641527769817},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1641527769817},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1641527769818},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1641527769817},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1641527769818},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1641527769818},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1641527769817},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1641527769819},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1641527769819},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1641527769818},{"_id":"themes/landscape/.DS_Store","hash":"ff7fac6a5c7dcc0b87524a2da777e1361991741a","modified":1641534997748},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1641527769819},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1641527769818},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1641527769818},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1641527769819},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1641527769819},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1641527769819},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1641527769819},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1641527769819},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1641527769820},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1641527769819},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1641527769819},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1641527769820},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1641527769820},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1641527769820},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1641527769820},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1641527769821},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1641527769822},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1641527769818},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1641527769822},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1641527769823},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1641527769821},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1641527769820},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1641527769821},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1641527769821},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1641527769821},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1641527769824},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1641527769824},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1641527769826},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1641527769826},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1641527769827},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1641527769827},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1641527769827},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1641527769827},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1641527769828},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1641527769828},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1641527769823},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1641527769827},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1641527769828},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1641527769827},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1641527769823},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1641527769823},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1641527769823},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1641527769823},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1641527769823},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1641527769827},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1641527769828},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1641527769828},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1641527769829},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1641527769829},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1641527769829},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1641527769829},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1641527769829},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1641527769829},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1641527769829},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1641527769828},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1641527769827},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1641527769824},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1641527769825},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1641527769829},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1641527769829},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1641527769830},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1641527769830},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1641527769826},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1641527769829},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1641527769830},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1641527769826},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1641527769827},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1641527769829},{"_id":"public/2021/08/07/2021-8-7/index.html","hash":"58555abb644d72388bcffa1eba1626f2f6859a2c","modified":1641639658080},{"_id":"public/2021/01/30/2021-1-30/index.html","hash":"5ed523f21b00b7925301b1fa0c60ec6be91fd289","modified":1641542822920},{"_id":"public/2020/11/11/2020-11-11/index.html","hash":"5647c7606e83f4e54797cca5cbb86593015d4dfd","modified":1641542822920},{"_id":"public/2020/10/28/2020-10-28/index.html","hash":"3d6dad41d470d3eaf69de4de7e98aa6a06085a71","modified":1641542822920},{"_id":"public/archives/index.html","hash":"6a6626c2900e2ebb24e6c520c89446c962a601c3","modified":1641639658080},{"_id":"public/archives/2020/index.html","hash":"843f446ab608a4df85c4783647503803fd53223f","modified":1641542822920},{"_id":"public/archives/2020/10/index.html","hash":"8750eaf7726b5429e3f18b2bafddd0c77d7bd03c","modified":1641542822920},{"_id":"public/archives/2020/11/index.html","hash":"04dc084b77530074f0210f8ebee35547f405f4c8","modified":1641542822920},{"_id":"public/archives/2021/index.html","hash":"924a0f342fc37ed6f9601b1ce33046fcae6afbf9","modified":1641542822920},{"_id":"public/archives/2021/01/index.html","hash":"a0ed3bdc066786a187c2daf5ddfdf8583ec7f045","modified":1641542822920},{"_id":"public/archives/2021/02/index.html","hash":"e592e270bee0397b9987c016b4b9ef2c9da07eea","modified":1641542822920},{"_id":"public/archives/2021/03/index.html","hash":"ae11ba8cfdd9058955129afd77f99071c5d745de","modified":1641542822920},{"_id":"public/archives/2021/08/index.html","hash":"badc0b8f058b8d2471f8c73c46b19bb62240cc3f","modified":1641542822920},{"_id":"public/2021/03/07/2021-3-7/index.html","hash":"39174c0119fb48f08f92192ef4132f75d61a091d","modified":1641542822920},{"_id":"public/2021/02/12/2021-2-12/index.html","hash":"7d0c34e91f5077a7594182aa6877dfe90fd031ec","modified":1641542822920},{"_id":"public/2021/06/28/2021-6-28/index.html","hash":"5f262975b0d2f94f564e142ba7021bf15f01443f","modified":1641542822920},{"_id":"public/index.html","hash":"32a3f9e64507a178bd2e6d57b41f56af107c5f83","modified":1641639658080},{"_id":"public/archives/2021/06/index.html","hash":"78e70fd9299ff272c37ee12f62f373850adc7458","modified":1641542822920},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1641535916199},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1641535916199},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1641535916199},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1641535916199},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1641535916199},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1641535916199},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1641535916199},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1641535916199},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1641535916199},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1641535916199},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1641535916199},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1641535916199},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1641535916199},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1641535916199},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1641535916199},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1641535916199},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1641535916199},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1641535916199},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1641535916199},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1641535916199},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1641535916199},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1641535916199},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1641535916199},{"_id":"source/CNAME","hash":"9015e0ec778dfb22a44a88fb84857d5566272a39","modified":1641539155732},{"_id":"public/CNAME","hash":"9015e0ec778dfb22a44a88fb84857d5566272a39","modified":1641539707506},{"_id":"themes/TKL/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1641542305760},{"_id":"themes/TKL/_config.yml","hash":"5a183abe0d6d77fa3ef9934b4e64657e58e12286","modified":1641542305758},{"_id":"themes/TKL/README.md","hash":"be19038e1bde09ad060e20b645e4d22df37eec1d","modified":1641542305758},{"_id":"themes/TKL/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1641542305760},{"_id":"themes/TKL/LICENSE","hash":"c700a8b9312d24bdc57570f7d6a131cf63d89016","modified":1641542305758},{"_id":"themes/TKL/layout/index.ejs","hash":"36e89b37f520533bef85fb32b714214257fad1d0","modified":1641542305760},{"_id":"themes/TKL/layout/page.ejs","hash":"29cf5f3bb27821cec6dd59d90ca1604b32f8fc0c","modified":1641542305760},{"_id":"themes/TKL/layout/layout.ejs","hash":"d14f05d7e5523fb64da0f1958e036c1086725e9d","modified":1641542305760},{"_id":"themes/TKL/layout/post.ejs","hash":"ae761feddc98f4d3260e7591ed9fc91d9a49d0ab","modified":1641542305761},{"_id":"themes/TKL/source/css/all.styl","hash":"9fa61a7eda4ea10ac7aac6ac438de96c3be3c487","modified":1641542305761},{"_id":"themes/TKL/source/css/animate.css","hash":"fca75b84887199a0ed8e0f056ff30f5a1302f324","modified":1641542305761},{"_id":"themes/TKL/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1641542305761},{"_id":"themes/TKL/source/css/flexslider.css","hash":"faebc8c54ca41e3c9936edaffbabbebd512c6d5a","modified":1641542305762},{"_id":"themes/TKL/source/css/custom.css","hash":"e87423888bf9a13ee0bc28a5aa725f40f999608a","modified":1641542305762},{"_id":"themes/TKL/source/css/animsition.min.css","hash":"59033074f6594a0d87c759e2b8cf9baa3a62ed6a","modified":1641542305761},{"_id":"themes/TKL/source/css/ie8.css","hash":"cfdfe07ecc9f3afa5bab47155b49f0924f62d2c2","modified":1641542305762},{"_id":"themes/TKL/source/css/screen.css","hash":"a13c2c6fe420f76083df2da6d7b2d765dd8b467e","modified":1641542305762},{"_id":"themes/TKL/source/css/iconList.css","hash":"f78ffffb4be40a6b0eb6ee109c958ccd062d1ae5","modified":1641542305762},{"_id":"themes/TKL/source/css/slidebars.min.css","hash":"a802c15d9bf06005b463901be8325d8ce38b5b04","modified":1641542305763},{"_id":"themes/TKL/source/css/syntax.styl","hash":"f39ea1e483c9244f39003d3efd20deb535ecddc7","modified":1641542305763},{"_id":"themes/TKL/source/fonts/icons.eot","hash":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1","modified":1641542305765},{"_id":"themes/TKL/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1641542305763},{"_id":"themes/TKL/source/fonts/icons.ttf","hash":"2169592997f694ffa05b1d4c23d5a1abf35d3203","modified":1641542305766},{"_id":"themes/TKL/source/fonts/icons.woff","hash":"af538de6ac19d5da1cada203c7451ce32f5daceb","modified":1641542305766},{"_id":"themes/TKL/source/fonts/opensans.woff","hash":"43b78d92be59efafc7ada7ee21abd4ba7a65c663","modified":1641542305767},{"_id":"themes/TKL/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1641542305763},{"_id":"themes/TKL/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1641542305764},{"_id":"themes/TKL/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1641542305764},{"_id":"themes/TKL/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1641542305764},{"_id":"themes/TKL/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1641542305764},{"_id":"themes/TKL/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1641542305764},{"_id":"themes/TKL/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1641542305764},{"_id":"themes/TKL/source/highlightjs/arta.css","hash":"08766ac9d70bde457fea9c553140029f57ace65a","modified":1641542305767},{"_id":"themes/TKL/source/highlightjs/ascetic.css","hash":"dd5e0c6c11bc199884cc5abf7310e79ce8018d0d","modified":1641542305767},{"_id":"themes/TKL/source/highlightjs/brown_paper.css","hash":"2a987d30dd142a5c316ace70e919e3312707ebbd","modified":1641542305767},{"_id":"themes/TKL/source/highlightjs/dark.css","hash":"38045930b1d862bb6e14960e94e63782145a598f","modified":1641542305767},{"_id":"themes/TKL/source/highlightjs/brown_papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1641542305767},{"_id":"themes/TKL/source/highlightjs/default.css","hash":"108ad8410aa3004eafc452ae60771a2ae24d7988","modified":1641542305767},{"_id":"themes/TKL/source/highlightjs/docco.css","hash":"70199b44d688d0a22851bd5481260f24160a38ee","modified":1641542305767},{"_id":"themes/TKL/source/highlightjs/github.css","hash":"53f47e65e6e0e6068baf5c4b638b04d2f4e0b0bc","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/googlecode.css","hash":"731e74bcdfd1b68aae5b5805540f727c31309ba2","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/far.css","hash":"8178ac70abe577ae8345f1f6291bf7d489ad384d","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/ir_black.css","hash":"2da52e8562b412039b5816e1a3a2f59e7dff0c27","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/foundation.css","hash":"308c2e0458fc117b323f7d9ce1644f7b4e52d99e","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/magula.css","hash":"5666f49986f05fb8956e0c3065a383b252779442","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/mono-blue.css","hash":"c143e9d8c62dc71ca39bc0b6c127464ed2396e4f","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/monokai.css","hash":"a0edb8327c191516a04d456db8aae9044055a5cf","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/monokai_sublime.css","hash":"6b4716416b1bba643d3a7926221ce6d83a139141","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/pojoaque.css","hash":"c9b048dc71c5b45d5cb3daac8f332a7e5d13b20f","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/obsidian.css","hash":"d6c264e1973beb9f20001b9a4013e9983923b34e","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/railscasts.css","hash":"aeb6ecd79552b9611d447fe56de5266954ea055c","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/idea.css","hash":"fb77c293850c454c1f0c72628c0b301537765ad2","modified":1641542305768},{"_id":"themes/TKL/source/highlightjs/school_book.css","hash":"f257d41cdca2609fa4c664df9cc14b48e2bcb09f","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/rainbow.css","hash":"b0e18f0f7fa08d5ad11956e2d9cc5e2ffdd514f3","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/sunburst.css","hash":"e72bc116795505c1fcae35bc69045043fc34a243","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-blue.css","hash":"e2bed22abcdf3f2b8ca3a1a73624751d3edc4e64","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/solarized_dark.css","hash":"007f9f1e7addf7e2040734cd1f733d041432c335","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/solarized_light.css","hash":"a85878fd70ecd03c71944df1acbbf320bac7979f","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/school_book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1641542305769},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-bright.css","hash":"afdb004743a8d2b52d38c7a1fce32d631a0f3ded","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/tomorrow-night.css","hash":"48cd18ce93daa491d89eb63e5fe3ab640ff56d74","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/tomorrow-night-eighties.css","hash":"9603bc778de2dabd0ce1e7ee272a047338a8b99c","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/tomorrow.css","hash":"a184e23b28b6a6401ecfc35e0a94de0bada589e4","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/xcode.css","hash":"78cb5758ce4085aa51edb6c5beb64d8f4511edd7","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/zenburn.css","hash":"73dafd21563f5fc3bb74856d4abf97c447a27772","modified":1641542305770},{"_id":"themes/TKL/source/highlightjs/vs.css","hash":"13e2f7ec2e197d79f4fc36768ea4a0663d41e1c0","modified":1641542305770},{"_id":"themes/TKL/source/img/favicon.ico","hash":"70fbd67d92be00781652fed26bda9af8d931fb0a","modified":1641542305775},{"_id":"themes/TKL/source/img/close.png","hash":"e52e6a61877efd98ddad9ca31ece27e8ee977327","modified":1641542305774},{"_id":"themes/TKL/source/img/logo.png","hash":"d40339b65179865c59d99fcbc6cd33618eef9ba3","modified":1641542305775},{"_id":"themes/TKL/source/js/jquery.ajaxchimp.min.js","hash":"9be17785b0d816e1cd6bc45908e1805e0522fe18","modified":1641542305776},{"_id":"themes/TKL/source/js/html5shiv.min.js","hash":"bb51a5f6c394989bb06e4171179354c6d05ec8f8","modified":1641542305775},{"_id":"themes/TKL/source/js/jquery.flexslider-min.js","hash":"51b3a7d882f438d53dc69ca5289e92254160c09a","modified":1641542305776},{"_id":"themes/TKL/source/js/scripts.js","hash":"9c05b2538f02df0313e6892083d2716d2c258f49","modified":1641542305777},{"_id":"themes/TKL/source/js/ziploader.js","hash":"4d487998f85dc6fae6c29c94f0163aa4c309319f","modified":1641542305777},{"_id":"themes/TKL/source/js/respond.min.js","hash":"b5aba40d65b0d6f85859db47f757ea971a0efd30","modified":1641542305777},{"_id":"themes/TKL/layout/_partial/after_all.ejs","hash":"706f9dd71442877349b53d360d42eb68cbb4856f","modified":1641542305759},{"_id":"themes/TKL/layout/_partial/archive.ejs","hash":"be083c1c5f865f64efbf9a17b34e5ccbe0bb9d64","modified":1641542305759},{"_id":"themes/TKL/layout/_partial/about.ejs","hash":"b0127ff072ce3158cc59301da9322c7dd9fd3a7d","modified":1641542305758},{"_id":"themes/TKL/layout/_partial/head.ejs","hash":"32596dce306a2e528b2681ddc1c15bb768b2cf44","modified":1641542305759},{"_id":"themes/TKL/layout/_partial/header.ejs","hash":"289803970d37ed7c3dfcc986782308770437847a","modified":1641542305759},{"_id":"themes/TKL/layout/_partial/footer.ejs","hash":"caa391c48c86488d36d7a717e7acd976c917adbf","modified":1641542305759},{"_id":"themes/TKL/layout/_partial/post.ejs","hash":"049c265fa02f69303f48753ae342ec2f65b9bb92","modified":1641542305759},{"_id":"themes/TKL/layout/_partial/post/comments.ejs","hash":"b42d96dc6e14558d31224a10149e2ac104f2da0e","modified":1641542305760},{"_id":"themes/TKL/layout/_partial/index.ejs","hash":"461d0772d383da6c6e3ed88e93f399f02002121a","modified":1641542305759},{"_id":"themes/TKL/layout/_partial/search.ejs","hash":"e6be2c6ef3b4d560c2b6291630e6ae1e6674c1bc","modified":1641542305760},{"_id":"themes/TKL/layout/_partial/post/navigation.ejs","hash":"1dd81ccccc3125d821765cfef1889bd25e85b5d5","modified":1641542305760},{"_id":"themes/TKL/layout/_partial/post/meta.ejs","hash":"c984cdc774bc884b33c8d87e3b59728cfdee773c","modified":1641542305760},{"_id":"themes/TKL/source/css/bootstrap.min.css","hash":"aabbadd6b436fa24c84fd8ca01d433bdab26fba5","modified":1641542305762},{"_id":"themes/TKL/source/css/style.css","hash":"c021f3e9e42d9e3f0639f044a01d43c36b40638c","modified":1641542305763},{"_id":"themes/TKL/source/fonts/icons.svg","hash":"4b8357c608c01f304789e34bfd133081c1fc8b9d","modified":1641542305766},{"_id":"themes/TKL/source/js/jquery-1.11.1.min.js","hash":"d6c1f41972de07b09bfa63d2e50f9ab41ec372bd","modified":1641542305776},{"_id":"themes/TKL/source/js/plugins.min.js","hash":"b9c5dd602b0d25d02ad704eef6e4e4d3b25f78db","modified":1641542305777},{"_id":"themes/TKL/source/img/blog.png","hash":"cca602b5c4158de6bf79e749511e8ed89b924635","modified":1641542305774},{"_id":"themes/TKL/source/img/1.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1641542305772},{"_id":"themes/TKL/source/img/bg_img.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1641542305773},{"_id":"public/fonts/opensans.woff","hash":"43b78d92be59efafc7ada7ee21abd4ba7a65c663","modified":1641542822920},{"_id":"public/fonts/icons.ttf","hash":"2169592997f694ffa05b1d4c23d5a1abf35d3203","modified":1641542822920},{"_id":"public/fonts/icons.eot","hash":"e307fc2d61d13bbc3aafc9abd75e727cbebadee1","modified":1641542822920},{"_id":"public/fonts/icons.woff","hash":"af538de6ac19d5da1cada203c7451ce32f5daceb","modified":1641542822920},{"_id":"public/highlightjs/brown_papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1641542822920},{"_id":"public/highlightjs/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1641542822920},{"_id":"public/highlightjs/school_book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1641542822920},{"_id":"public/img/close.png","hash":"e52e6a61877efd98ddad9ca31ece27e8ee977327","modified":1641542822920},{"_id":"public/img/logo.png","hash":"d40339b65179865c59d99fcbc6cd33618eef9ba3","modified":1641542822920},{"_id":"public/img/favicon.ico","hash":"70fbd67d92be00781652fed26bda9af8d931fb0a","modified":1641542822920},{"_id":"public/fonts/icons.svg","hash":"4b8357c608c01f304789e34bfd133081c1fc8b9d","modified":1641542822920},{"_id":"public/css/animate.css","hash":"fca75b84887199a0ed8e0f056ff30f5a1302f324","modified":1641542822920},{"_id":"public/css/custom.css","hash":"e87423888bf9a13ee0bc28a5aa725f40f999608a","modified":1641542822920},{"_id":"public/css/flexslider.css","hash":"faebc8c54ca41e3c9936edaffbabbebd512c6d5a","modified":1641542822920},{"_id":"public/css/iconList.css","hash":"f78ffffb4be40a6b0eb6ee109c958ccd062d1ae5","modified":1641542822920},{"_id":"public/css/ie8.css","hash":"cfdfe07ecc9f3afa5bab47155b49f0924f62d2c2","modified":1641542822920},{"_id":"public/css/screen.css","hash":"a13c2c6fe420f76083df2da6d7b2d765dd8b467e","modified":1641542822920},{"_id":"public/css/syntax.css","hash":"d5923a6251a113ac02916bcd1119356bd780d7ef","modified":1641542822920},{"_id":"public/css/slidebars.min.css","hash":"a802c15d9bf06005b463901be8325d8ce38b5b04","modified":1641542822920},{"_id":"public/highlightjs/arta.css","hash":"08766ac9d70bde457fea9c553140029f57ace65a","modified":1641542822920},{"_id":"public/highlightjs/ascetic.css","hash":"ef259aecdc8f1367dcf890d6467369300c4c0d07","modified":1641542822920},{"_id":"public/highlightjs/dark.css","hash":"2c2b4eb2562d812d95a26da0ffae51371b383713","modified":1641542822920},{"_id":"public/highlightjs/brown_paper.css","hash":"2a987d30dd142a5c316ace70e919e3312707ebbd","modified":1641542822920},{"_id":"public/highlightjs/docco.css","hash":"70199b44d688d0a22851bd5481260f24160a38ee","modified":1641542822920},{"_id":"public/highlightjs/default.css","hash":"108ad8410aa3004eafc452ae60771a2ae24d7988","modified":1641542822920},{"_id":"public/highlightjs/far.css","hash":"8178ac70abe577ae8345f1f6291bf7d489ad384d","modified":1641542822920},{"_id":"public/highlightjs/foundation.css","hash":"308c2e0458fc117b323f7d9ce1644f7b4e52d99e","modified":1641542822920},{"_id":"public/highlightjs/github.css","hash":"53f47e65e6e0e6068baf5c4b638b04d2f4e0b0bc","modified":1641542822920},{"_id":"public/highlightjs/googlecode.css","hash":"731e74bcdfd1b68aae5b5805540f727c31309ba2","modified":1641542822920},{"_id":"public/highlightjs/ir_black.css","hash":"2da52e8562b412039b5816e1a3a2f59e7dff0c27","modified":1641542822920},{"_id":"public/highlightjs/magula.css","hash":"9c53982a77259331c1dc3b24ef744dd76b3fe643","modified":1641542822920},{"_id":"public/highlightjs/mono-blue.css","hash":"c143e9d8c62dc71ca39bc0b6c127464ed2396e4f","modified":1641542822920},{"_id":"public/highlightjs/monokai.css","hash":"a0edb8327c191516a04d456db8aae9044055a5cf","modified":1641542822920},{"_id":"public/highlightjs/obsidian.css","hash":"d6c264e1973beb9f20001b9a4013e9983923b34e","modified":1641542822920},{"_id":"public/highlightjs/pojoaque.css","hash":"c9b048dc71c5b45d5cb3daac8f332a7e5d13b20f","modified":1641542822920},{"_id":"public/highlightjs/monokai_sublime.css","hash":"6b4716416b1bba643d3a7926221ce6d83a139141","modified":1641542822920},{"_id":"public/highlightjs/idea.css","hash":"fb77c293850c454c1f0c72628c0b301537765ad2","modified":1641542822920},{"_id":"public/highlightjs/railscasts.css","hash":"aeb6ecd79552b9611d447fe56de5266954ea055c","modified":1641542822920},{"_id":"public/highlightjs/school_book.css","hash":"f257d41cdca2609fa4c664df9cc14b48e2bcb09f","modified":1641542822920},{"_id":"public/highlightjs/rainbow.css","hash":"b0e18f0f7fa08d5ad11956e2d9cc5e2ffdd514f3","modified":1641542822920},{"_id":"public/highlightjs/sunburst.css","hash":"e72bc116795505c1fcae35bc69045043fc34a243","modified":1641542822920},{"_id":"public/highlightjs/solarized_light.css","hash":"a85878fd70ecd03c71944df1acbbf320bac7979f","modified":1641542822920},{"_id":"public/highlightjs/solarized_dark.css","hash":"007f9f1e7addf7e2040734cd1f733d041432c335","modified":1641542822920},{"_id":"public/highlightjs/tomorrow-night-blue.css","hash":"e2bed22abcdf3f2b8ca3a1a73624751d3edc4e64","modified":1641542822920},{"_id":"public/highlightjs/tomorrow-night.css","hash":"48cd18ce93daa491d89eb63e5fe3ab640ff56d74","modified":1641542822920},{"_id":"public/highlightjs/tomorrow-night-bright.css","hash":"afdb004743a8d2b52d38c7a1fce32d631a0f3ded","modified":1641542822920},{"_id":"public/highlightjs/tomorrow-night-eighties.css","hash":"9603bc778de2dabd0ce1e7ee272a047338a8b99c","modified":1641542822920},{"_id":"public/highlightjs/tomorrow.css","hash":"a184e23b28b6a6401ecfc35e0a94de0bada589e4","modified":1641542822920},{"_id":"public/highlightjs/vs.css","hash":"13e2f7ec2e197d79f4fc36768ea4a0663d41e1c0","modified":1641542822920},{"_id":"public/highlightjs/zenburn.css","hash":"73dafd21563f5fc3bb74856d4abf97c447a27772","modified":1641542822920},{"_id":"public/highlightjs/xcode.css","hash":"78cb5758ce4085aa51edb6c5beb64d8f4511edd7","modified":1641542822920},{"_id":"public/js/html5shiv.min.js","hash":"bb51a5f6c394989bb06e4171179354c6d05ec8f8","modified":1641542822920},{"_id":"public/js/jquery.ajaxchimp.min.js","hash":"9be17785b0d816e1cd6bc45908e1805e0522fe18","modified":1641542822920},{"_id":"public/js/scripts.js","hash":"9c05b2538f02df0313e6892083d2716d2c258f49","modified":1641542822920},{"_id":"public/js/respond.min.js","hash":"b5aba40d65b0d6f85859db47f757ea971a0efd30","modified":1641542822920},{"_id":"public/css/all.css","hash":"4a49e067bc884d6a1b5c3c8a838802a16d4b6679","modified":1641542822920},{"_id":"public/js/jquery.flexslider-min.js","hash":"51b3a7d882f438d53dc69ca5289e92254160c09a","modified":1641542822920},{"_id":"public/js/ziploader.js","hash":"f0266f9d8f5bd652ab5370fea02ac90401795ee2","modified":1641542822920},{"_id":"public/css/animsition.min.css","hash":"59033074f6594a0d87c759e2b8cf9baa3a62ed6a","modified":1641542822920},{"_id":"public/js/plugins.min.js","hash":"b9c5dd602b0d25d02ad704eef6e4e4d3b25f78db","modified":1641542822920},{"_id":"public/img/blog.png","hash":"cca602b5c4158de6bf79e749511e8ed89b924635","modified":1641542822920},{"_id":"public/js/jquery-1.11.1.min.js","hash":"d6c1f41972de07b09bfa63d2e50f9ab41ec372bd","modified":1641542822920},{"_id":"public/css/bootstrap.min.css","hash":"aabbadd6b436fa24c84fd8ca01d433bdab26fba5","modified":1641542822920},{"_id":"public/img/1.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1641542822920},{"_id":"public/img/bg_img.jpg","hash":"63ce0452832831e46097c7cd400bdcb2d01ad6ef","modified":1641542822920},{"_id":"source/_posts/2022-01-07.md","hash":"6480031542908ae4c38b3cdfa17e41a524a52217","modified":1641639624660},{"_id":"public/archives/2022/index.html","hash":"9386e91b1527e65a6854ab0250db3131fd541b1a","modified":1641639658080},{"_id":"public/archives/2022/01/index.html","hash":"94c6f40f55e286b8c335d20fee157ed0c14eafa0","modified":1641639658080},{"_id":"public/2022/01/07/2022-01-07/index.html","hash":"74189c4bcbf919d7f82aae6cff2dbeb0c88297a0","modified":1641639658080}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"从一张白纸到初识 Web","date":"2020-10-27T16:00:00.000Z","_content":"\n## 从一张白纸到初识 Web\n\n2020-10-28\n\n### 美好的生活从选择开始\n\n经过一年多在社会上的摸索，我感受到了种种与自己曾期望的生活的诸多不同，比刚毕业时更加的不知所措，感到更多的迷茫，很感谢自己有琚这样的好哥们，在我如此茫然的时候可以给我提出很多不错的建议和选择。如此便有了，我到目前以至今后都会觉得这是一个对我很重要的一次选择。实打实的开始学习 Web !\n\n### 从一张白纸到初识 Web\n\n来到深圳的这两个月来，我从刚开始对 Web 一概不知到现在简单的入门，刚开始还对自己抱有一定的怀疑，不知道是否真的可以学会它，在我看来，它是一门包含高技术要求的一门技术。逐渐的，我花了一个月的时间来学习理论知识，初步学习了 HTML 简介、CSS 样式、JavaScript 脚步语言的一些原理及用法。我从对 Web 的开始有了真正的兴趣爱好，构建每一个页面从 0 到 1 的过程让我喜欢上了这门技术。我久违的感受到了生活的美好～\n\n### 从初识 Web 到第一次实践\n\n在我对 Web 技术有了一个基本的了解和掌握的时候，琚交给了我一项工作，对于刚入门的我来说，这是一个练手的好机会！任务是这样的：用不同的框架（学习的第一个框架 React) 写一个一模一样的页面。在写这个页面的过程中，我学到了很重要的道理，在 Web 的世界中答案或许是一定，但绝对不是唯一的，通过阅读别人写的代码，可以适当的借鉴，但它不一定就是完美无缺的。毕竟是第一次实践，被琚大佬反复吊过之后，规范了我在写代码时的一些习惯。代码的格式工整和可读性，对冗余代码的精简和复用等有了深刻的认识。不得不说，养成这些习惯是很重要的，我将它牢记于心，在接下来的过程中，一边学习，一边探索，一边陶醉，看着那空空的页面被我一点一点的填充，变得完整，我再一次感到 Web 技术为我带来的愉悦。\n\n紧接着第一个任务完成后，我就被安排上了第二项工作，如果说第一项工作是练手的话，那么这次任务便是对我使用当前掌握知识的巩固。这是一个修复邮件模板兼容性样式的任务。这个任务没有 JavaScript 的部分，这对于现阶段的我来说真是一件非常帮的任务，通过不停的查阅资料，从需求出发，一步一步的实现它，这个过程中，也算是体会到从一筹莫展的烦恼到豁然开朗的兴奋的转变过程是多么的有趣。有时候我也会写代码不知不觉到凌晨，而且我发现，当遇到一个比较难解决的问题时，花费大量的时间未能解决掉的问题，可能在下个瞬间就想明白了。这也让我学会了不要死磕难题。\n\n邮件模板的任务中让我明白了它的局限性和麻烦性。对很多 CSS3 中的属性不兼容使得问题解决方法减少了许多，这也是让我觉得 Web 的神奇之处，你遇到的所有问题，总会有办法解决绝大部分正常的需求。经过反复的推敲和修改，终于完成。看到自己一点一点修改好的模板已经投入使用，这种心情真是太舒畅了！感谢琚大佬帮我牵线搭桥～\n\n通过这两项工作，我觉得我已经从一个小白成功的达到了对 Web 的初步入门，正当我感觉到兴奋之时，我越来越明白学习就是，当你学到的东西越来越多时，你会发现有更多的东西你还不明白，越学习越不会原来是这样来的，反反复复。\n\n### 总结\n\n能把 JavaScript 完全啃下来是才是真本事，任何时候绝对不能骄傲，接下来的日子我更加需要静下心来，一点一滴的积累，或许也是回家前的开心，和许久不见的花儿，最近没能充分有效利用时间呢，在这里得好好反思一番！今天顺利到家，明天去接我家的花儿，之后就更得珍惜时间来弥补了！生活还很美好，好好珍惜，好好努力，好好学习！\n","source":"_posts/2020-10-28.md","raw":"---\ntitle: 从一张白纸到初识 Web\ndate: 2020-10-28\n---\n\n## 从一张白纸到初识 Web\n\n2020-10-28\n\n### 美好的生活从选择开始\n\n经过一年多在社会上的摸索，我感受到了种种与自己曾期望的生活的诸多不同，比刚毕业时更加的不知所措，感到更多的迷茫，很感谢自己有琚这样的好哥们，在我如此茫然的时候可以给我提出很多不错的建议和选择。如此便有了，我到目前以至今后都会觉得这是一个对我很重要的一次选择。实打实的开始学习 Web !\n\n### 从一张白纸到初识 Web\n\n来到深圳的这两个月来，我从刚开始对 Web 一概不知到现在简单的入门，刚开始还对自己抱有一定的怀疑，不知道是否真的可以学会它，在我看来，它是一门包含高技术要求的一门技术。逐渐的，我花了一个月的时间来学习理论知识，初步学习了 HTML 简介、CSS 样式、JavaScript 脚步语言的一些原理及用法。我从对 Web 的开始有了真正的兴趣爱好，构建每一个页面从 0 到 1 的过程让我喜欢上了这门技术。我久违的感受到了生活的美好～\n\n### 从初识 Web 到第一次实践\n\n在我对 Web 技术有了一个基本的了解和掌握的时候，琚交给了我一项工作，对于刚入门的我来说，这是一个练手的好机会！任务是这样的：用不同的框架（学习的第一个框架 React) 写一个一模一样的页面。在写这个页面的过程中，我学到了很重要的道理，在 Web 的世界中答案或许是一定，但绝对不是唯一的，通过阅读别人写的代码，可以适当的借鉴，但它不一定就是完美无缺的。毕竟是第一次实践，被琚大佬反复吊过之后，规范了我在写代码时的一些习惯。代码的格式工整和可读性，对冗余代码的精简和复用等有了深刻的认识。不得不说，养成这些习惯是很重要的，我将它牢记于心，在接下来的过程中，一边学习，一边探索，一边陶醉，看着那空空的页面被我一点一点的填充，变得完整，我再一次感到 Web 技术为我带来的愉悦。\n\n紧接着第一个任务完成后，我就被安排上了第二项工作，如果说第一项工作是练手的话，那么这次任务便是对我使用当前掌握知识的巩固。这是一个修复邮件模板兼容性样式的任务。这个任务没有 JavaScript 的部分，这对于现阶段的我来说真是一件非常帮的任务，通过不停的查阅资料，从需求出发，一步一步的实现它，这个过程中，也算是体会到从一筹莫展的烦恼到豁然开朗的兴奋的转变过程是多么的有趣。有时候我也会写代码不知不觉到凌晨，而且我发现，当遇到一个比较难解决的问题时，花费大量的时间未能解决掉的问题，可能在下个瞬间就想明白了。这也让我学会了不要死磕难题。\n\n邮件模板的任务中让我明白了它的局限性和麻烦性。对很多 CSS3 中的属性不兼容使得问题解决方法减少了许多，这也是让我觉得 Web 的神奇之处，你遇到的所有问题，总会有办法解决绝大部分正常的需求。经过反复的推敲和修改，终于完成。看到自己一点一点修改好的模板已经投入使用，这种心情真是太舒畅了！感谢琚大佬帮我牵线搭桥～\n\n通过这两项工作，我觉得我已经从一个小白成功的达到了对 Web 的初步入门，正当我感觉到兴奋之时，我越来越明白学习就是，当你学到的东西越来越多时，你会发现有更多的东西你还不明白，越学习越不会原来是这样来的，反反复复。\n\n### 总结\n\n能把 JavaScript 完全啃下来是才是真本事，任何时候绝对不能骄傲，接下来的日子我更加需要静下心来，一点一滴的积累，或许也是回家前的开心，和许久不见的花儿，最近没能充分有效利用时间呢，在这里得好好反思一番！今天顺利到家，明天去接我家的花儿，之后就更得珍惜时间来弥补了！生活还很美好，好好珍惜，好好努力，好好学习！\n","slug":"2020-10-28","published":1,"updated":"2022-01-07T05:38:44.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky403nev0000crul7q23g814","content":"<h2 id=\"从一张白纸到初识-Web\"><a href=\"#从一张白纸到初识-Web\" class=\"headerlink\" title=\"从一张白纸到初识 Web\"></a>从一张白纸到初识 Web</h2><p>2020-10-28</p>\n<h3 id=\"美好的生活从选择开始\"><a href=\"#美好的生活从选择开始\" class=\"headerlink\" title=\"美好的生活从选择开始\"></a>美好的生活从选择开始</h3><p>经过一年多在社会上的摸索，我感受到了种种与自己曾期望的生活的诸多不同，比刚毕业时更加的不知所措，感到更多的迷茫，很感谢自己有琚这样的好哥们，在我如此茫然的时候可以给我提出很多不错的建议和选择。如此便有了，我到目前以至今后都会觉得这是一个对我很重要的一次选择。实打实的开始学习 Web !</p>\n<h3 id=\"从一张白纸到初识-Web-1\"><a href=\"#从一张白纸到初识-Web-1\" class=\"headerlink\" title=\"从一张白纸到初识 Web\"></a>从一张白纸到初识 Web</h3><p>来到深圳的这两个月来，我从刚开始对 Web 一概不知到现在简单的入门，刚开始还对自己抱有一定的怀疑，不知道是否真的可以学会它，在我看来，它是一门包含高技术要求的一门技术。逐渐的，我花了一个月的时间来学习理论知识，初步学习了 HTML 简介、CSS 样式、JavaScript 脚步语言的一些原理及用法。我从对 Web 的开始有了真正的兴趣爱好，构建每一个页面从 0 到 1 的过程让我喜欢上了这门技术。我久违的感受到了生活的美好～</p>\n<h3 id=\"从初识-Web-到第一次实践\"><a href=\"#从初识-Web-到第一次实践\" class=\"headerlink\" title=\"从初识 Web 到第一次实践\"></a>从初识 Web 到第一次实践</h3><p>在我对 Web 技术有了一个基本的了解和掌握的时候，琚交给了我一项工作，对于刚入门的我来说，这是一个练手的好机会！任务是这样的：用不同的框架（学习的第一个框架 React) 写一个一模一样的页面。在写这个页面的过程中，我学到了很重要的道理，在 Web 的世界中答案或许是一定，但绝对不是唯一的，通过阅读别人写的代码，可以适当的借鉴，但它不一定就是完美无缺的。毕竟是第一次实践，被琚大佬反复吊过之后，规范了我在写代码时的一些习惯。代码的格式工整和可读性，对冗余代码的精简和复用等有了深刻的认识。不得不说，养成这些习惯是很重要的，我将它牢记于心，在接下来的过程中，一边学习，一边探索，一边陶醉，看着那空空的页面被我一点一点的填充，变得完整，我再一次感到 Web 技术为我带来的愉悦。</p>\n<p>紧接着第一个任务完成后，我就被安排上了第二项工作，如果说第一项工作是练手的话，那么这次任务便是对我使用当前掌握知识的巩固。这是一个修复邮件模板兼容性样式的任务。这个任务没有 JavaScript 的部分，这对于现阶段的我来说真是一件非常帮的任务，通过不停的查阅资料，从需求出发，一步一步的实现它，这个过程中，也算是体会到从一筹莫展的烦恼到豁然开朗的兴奋的转变过程是多么的有趣。有时候我也会写代码不知不觉到凌晨，而且我发现，当遇到一个比较难解决的问题时，花费大量的时间未能解决掉的问题，可能在下个瞬间就想明白了。这也让我学会了不要死磕难题。</p>\n<p>邮件模板的任务中让我明白了它的局限性和麻烦性。对很多 CSS3 中的属性不兼容使得问题解决方法减少了许多，这也是让我觉得 Web 的神奇之处，你遇到的所有问题，总会有办法解决绝大部分正常的需求。经过反复的推敲和修改，终于完成。看到自己一点一点修改好的模板已经投入使用，这种心情真是太舒畅了！感谢琚大佬帮我牵线搭桥～</p>\n<p>通过这两项工作，我觉得我已经从一个小白成功的达到了对 Web 的初步入门，正当我感觉到兴奋之时，我越来越明白学习就是，当你学到的东西越来越多时，你会发现有更多的东西你还不明白，越学习越不会原来是这样来的，反反复复。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>能把 JavaScript 完全啃下来是才是真本事，任何时候绝对不能骄傲，接下来的日子我更加需要静下心来，一点一滴的积累，或许也是回家前的开心，和许久不见的花儿，最近没能充分有效利用时间呢，在这里得好好反思一番！今天顺利到家，明天去接我家的花儿，之后就更得珍惜时间来弥补了！生活还很美好，好好珍惜，好好努力，好好学习！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"从一张白纸到初识-Web\"><a href=\"#从一张白纸到初识-Web\" class=\"headerlink\" title=\"从一张白纸到初识 Web\"></a>从一张白纸到初识 Web</h2><p>2020-10-28</p>\n<h3 id=\"美好的生活从选择开始\"><a href=\"#美好的生活从选择开始\" class=\"headerlink\" title=\"美好的生活从选择开始\"></a>美好的生活从选择开始</h3><p>经过一年多在社会上的摸索，我感受到了种种与自己曾期望的生活的诸多不同，比刚毕业时更加的不知所措，感到更多的迷茫，很感谢自己有琚这样的好哥们，在我如此茫然的时候可以给我提出很多不错的建议和选择。如此便有了，我到目前以至今后都会觉得这是一个对我很重要的一次选择。实打实的开始学习 Web !</p>\n<h3 id=\"从一张白纸到初识-Web-1\"><a href=\"#从一张白纸到初识-Web-1\" class=\"headerlink\" title=\"从一张白纸到初识 Web\"></a>从一张白纸到初识 Web</h3><p>来到深圳的这两个月来，我从刚开始对 Web 一概不知到现在简单的入门，刚开始还对自己抱有一定的怀疑，不知道是否真的可以学会它，在我看来，它是一门包含高技术要求的一门技术。逐渐的，我花了一个月的时间来学习理论知识，初步学习了 HTML 简介、CSS 样式、JavaScript 脚步语言的一些原理及用法。我从对 Web 的开始有了真正的兴趣爱好，构建每一个页面从 0 到 1 的过程让我喜欢上了这门技术。我久违的感受到了生活的美好～</p>\n<h3 id=\"从初识-Web-到第一次实践\"><a href=\"#从初识-Web-到第一次实践\" class=\"headerlink\" title=\"从初识 Web 到第一次实践\"></a>从初识 Web 到第一次实践</h3><p>在我对 Web 技术有了一个基本的了解和掌握的时候，琚交给了我一项工作，对于刚入门的我来说，这是一个练手的好机会！任务是这样的：用不同的框架（学习的第一个框架 React) 写一个一模一样的页面。在写这个页面的过程中，我学到了很重要的道理，在 Web 的世界中答案或许是一定，但绝对不是唯一的，通过阅读别人写的代码，可以适当的借鉴，但它不一定就是完美无缺的。毕竟是第一次实践，被琚大佬反复吊过之后，规范了我在写代码时的一些习惯。代码的格式工整和可读性，对冗余代码的精简和复用等有了深刻的认识。不得不说，养成这些习惯是很重要的，我将它牢记于心，在接下来的过程中，一边学习，一边探索，一边陶醉，看着那空空的页面被我一点一点的填充，变得完整，我再一次感到 Web 技术为我带来的愉悦。</p>\n<p>紧接着第一个任务完成后，我就被安排上了第二项工作，如果说第一项工作是练手的话，那么这次任务便是对我使用当前掌握知识的巩固。这是一个修复邮件模板兼容性样式的任务。这个任务没有 JavaScript 的部分，这对于现阶段的我来说真是一件非常帮的任务，通过不停的查阅资料，从需求出发，一步一步的实现它，这个过程中，也算是体会到从一筹莫展的烦恼到豁然开朗的兴奋的转变过程是多么的有趣。有时候我也会写代码不知不觉到凌晨，而且我发现，当遇到一个比较难解决的问题时，花费大量的时间未能解决掉的问题，可能在下个瞬间就想明白了。这也让我学会了不要死磕难题。</p>\n<p>邮件模板的任务中让我明白了它的局限性和麻烦性。对很多 CSS3 中的属性不兼容使得问题解决方法减少了许多，这也是让我觉得 Web 的神奇之处，你遇到的所有问题，总会有办法解决绝大部分正常的需求。经过反复的推敲和修改，终于完成。看到自己一点一点修改好的模板已经投入使用，这种心情真是太舒畅了！感谢琚大佬帮我牵线搭桥～</p>\n<p>通过这两项工作，我觉得我已经从一个小白成功的达到了对 Web 的初步入门，正当我感觉到兴奋之时，我越来越明白学习就是，当你学到的东西越来越多时，你会发现有更多的东西你还不明白，越学习越不会原来是这样来的，反反复复。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>能把 JavaScript 完全啃下来是才是真本事，任何时候绝对不能骄傲，接下来的日子我更加需要静下心来，一点一滴的积累，或许也是回家前的开心，和许久不见的花儿，最近没能充分有效利用时间呢，在这里得好好反思一番！今天顺利到家，明天去接我家的花儿，之后就更得珍惜时间来弥补了！生活还很美好，好好珍惜，好好努力，好好学习！</p>\n"},{"title":"谈近四个月学 web 的感受和反思","date":"2021-02-11T16:00:00.000Z","_content":"\n## 谈近四个月学 web 的感受和反思\n\n2021-2-12\n\n不知不觉已经学 web 技术半年了，反思近来做的事，从之前对各种技术的一概不知道，慢慢到现在知道该如何去学习，去解决一些问题，尽管是一些简单的问题，但是却需要我去花大量的时间去解决它，每次解决的过程都收获很大。\n\n--------\n\n### Cypress\n\n先从最近的来说，最近写了很多的前端测试案例，从刚开始写的时候只会跟着文档，和已经写好的一些案例来模仿，再到之后提交到 github 上时，CI 测试各种失败的过程，我越发觉得 web 技术是一门非常严谨的技术，可能一点的逻辑问题就会造成案例在 CI 中的失败，列举一个困扰我很久的例子：\n```\n    Cypress.Commands.add('configurePlugins', (cases) => {\n      const timeout = 300;\n      const domSelectors = {\n        name: '[data-cy-plugin-name]',\n        parents: '.ant-card-bordered',\n        drawer_wrap: '.ant-drawer-content-wrapper',\n        drawer: '.ant-drawer-content',\n        switch: '#disable',\n        close: '.anticon-close',\n      };\n\n      cy.get(domSelectors.name, { timeout }).then(function (cards) {\n        [...cards].forEach((card) => {\n          const name = card.innerText;\n          const pluginCases = cases[name] || [];\n          // eslint-disable-next-line consistent-return\n          pluginCases.forEach(({ shouldValid, data, type = '' }) => {\n            if (type === 'consumer') {\n              return true;\n            }\n\n            cy.contains(name)\n              .parents(domSelectors.parents)\n              .within(() => {\n                cy.contains('Enable').click({\n                  force: true,\n                });\n              });\n\n            // NOTE: wait for the Drawer to appear on the DOM\n            cy.wait(300);\n            cy.get(domSelectors.drawer, { timeout }).within(() => {\n              cy.get(domSelectors.switch).click({\n                force: true,\n              });\n            });\n\n            cy.window().then(({ codemirror }) => {\n              if (codemirror) {\n                codemirror.setValue(JSON.stringify(data));\n              }\n              cy.get(domSelectors.drawer, { timeout }).within(() => {\n                cy.contains('Submit').click({\n                  force: true,\n                });\n              });\n            });\n\n            cy.wait(300);\n            if (shouldValid === true) {\n              cy.get(domSelectors.drawer).should('not.exist');\n            } else if (shouldValid === false) {\n              cy.get(this.selector.notification).should('contain', 'Invalid plugin data');\n\n              cy.get(domSelectors.close).click({\n                force: true,\n                multiple: true,\n              });\n\n              cy.get(domSelectors.drawer, { timeout })\n                .invoke('show')\n                .within(() => {\n                  cy.contains('Cancel').click({\n                    force: true,\n                  });\n                });\n            }\n          });\n        });\n      });\n    });\n```\n\n在中间 `wait()` 部分，因为少了两个 `should()` 来确保点击前 dom 元素已经出现，我不得不使用两个 `wait()` 来解决它在 CI 测试中失败的问题，在我重新翻阅 cypress 的官方文档，和看了几个其他写测试的 PR 之后我才明白问题的关键所在！\n\n接着我将 `wait()` 换成：\n```\n    cy.focused(domSelectors.drawer_wrap).should('exist');\n```\n\n顺利解决了此问题。\n\n后来我又重新的翻阅 cypress 的官方文档后，去阅读更深层的测试 dom 的原理，发现应该尽可能多地在测试中使用 `should` 方法，来确保每一个 dom 元素的出现，再继续进行后面的测试，以及我们不应该使用 wait 方法在测试中，我们不必花费任何的时间去做多余的等待，经过这点我对 weadb 技术有了更深一步的认识和了解，我们不仅应该确保测试的正常运行，还需要提高测试的稳定性，和完整性。因为它是一门非常严谨的语言！\n\n### Fix: Bug\n\n还有一件令我很有感触的事情，之前我一直很疑惑为什么读别人写的代码，抄别人写过的代码也可以学习很多东西，直到在之后处理一个控制台上的，插件 bug 的这个过程中，我有了非常深刻的认识：\n\n1. 首先，我必须了解有关这个 bug 部分代码的每一行代码的作用。也就是读懂每一行代码的功能。\n2. 其次，我需要明白出现 bug 的原因是什么，有可能是那部分的功能影响到它，以及我需要准确的找出它所在的位置，这更加考验了阅读代码的能力，与理解能力。\n3. 接着，需要将重点关注的地方，一个一个打印出来，来确认是否是这些地方出现的问题，加以分析解决。\n4. 最后，就是通过对整个过程的理解和分析，来确认问题出现的关键，往往正确找到问题的所在，就可以顺利的解决问题！\n\n整个过程下来，的确可以学习很多东西，又可以加深对代码的理解，还可以学到自己未能注意到的地方！\n\n### 从 Review 中学习\n\n再然后就是帮别人 review 代码的过程，这个过程我同样是颇有感触，一件未做过的时候，第一次做的时候一定要花费足够的时间去处理它，因为你不知道你会遇到什么问题，更不可大意对待它！\n\n帮别人 review 的过程中，需要更加的认真和仔细，不明白的地方要敢于去询问，询问的过程也是学习的过程，而且在看别人写的代码的过程中，可以学到很多自己未曾注意到的地方，确确实实，相同的功能，每个人写出来的代码可能会各有差异，这也让我体会到了，这门技术的广泛与强大！\n\n### 反思总结\n\n最后，总结反思几件生活中所遇到的事情。\n\n第一，答应过别人的事情，一定一定要做到，如果确确实实有困难，也一定要提前及时的说出来告知对方，绝对不要因为自己错误的计算时间，计划事情而耽误别人，这样不但丢了信任，还会耽误到别人！\n\n第二，做每一件事不可因为简单，就大意对待，反而应该更加的去注意，不要犯一些小差错，往往小差错会产生更大的问题，务必要谨慎对待，细心检查！\n\n第三，计划事情一定要留出充分的时间，当前一件事情被耽搁的时候，要考虑充分，及时做出合理安排，立马去做放下它，去做别的事情，许多事情是一个循序渐进的过程，不能因为自己的倔强和死磕，而耽误其他事情的进行，这样只会把事情越积攒越多，反而会耽误更多的事情！\n\n第四，自己说过的话就一定要完成它，不要随意的立下目标，说话要考虑充分，少一些急躁，多一些沉稳，要考虑清楚再说。\n\n第五，做开发的过程，一定要先想清楚再动手，不要盲目的去尝试，严谨的技术，不是靠试出来的，要先分析清楚，想明白逻辑，要养成画草图的习惯，再动手去做，这样才能更加的有效利用时间，不会做很多的无用功！\n\n最后，既然决定学习 web 技术就一定要好好加油，继续不能松懈，比你还牛的人还在努力，你没有任何道理可以松懈下来！要多反思自己，把不好的习惯及时改掉！总结下来，我可以不会，但不能不想学，反而一定要因为不会，所以才更应该努力的去学！\n","source":"_posts/2021-2-12.md","raw":"---\ntitle: 谈近四个月学 web 的感受和反思\ndate: 2021-02-12\n---\n\n## 谈近四个月学 web 的感受和反思\n\n2021-2-12\n\n不知不觉已经学 web 技术半年了，反思近来做的事，从之前对各种技术的一概不知道，慢慢到现在知道该如何去学习，去解决一些问题，尽管是一些简单的问题，但是却需要我去花大量的时间去解决它，每次解决的过程都收获很大。\n\n--------\n\n### Cypress\n\n先从最近的来说，最近写了很多的前端测试案例，从刚开始写的时候只会跟着文档，和已经写好的一些案例来模仿，再到之后提交到 github 上时，CI 测试各种失败的过程，我越发觉得 web 技术是一门非常严谨的技术，可能一点的逻辑问题就会造成案例在 CI 中的失败，列举一个困扰我很久的例子：\n```\n    Cypress.Commands.add('configurePlugins', (cases) => {\n      const timeout = 300;\n      const domSelectors = {\n        name: '[data-cy-plugin-name]',\n        parents: '.ant-card-bordered',\n        drawer_wrap: '.ant-drawer-content-wrapper',\n        drawer: '.ant-drawer-content',\n        switch: '#disable',\n        close: '.anticon-close',\n      };\n\n      cy.get(domSelectors.name, { timeout }).then(function (cards) {\n        [...cards].forEach((card) => {\n          const name = card.innerText;\n          const pluginCases = cases[name] || [];\n          // eslint-disable-next-line consistent-return\n          pluginCases.forEach(({ shouldValid, data, type = '' }) => {\n            if (type === 'consumer') {\n              return true;\n            }\n\n            cy.contains(name)\n              .parents(domSelectors.parents)\n              .within(() => {\n                cy.contains('Enable').click({\n                  force: true,\n                });\n              });\n\n            // NOTE: wait for the Drawer to appear on the DOM\n            cy.wait(300);\n            cy.get(domSelectors.drawer, { timeout }).within(() => {\n              cy.get(domSelectors.switch).click({\n                force: true,\n              });\n            });\n\n            cy.window().then(({ codemirror }) => {\n              if (codemirror) {\n                codemirror.setValue(JSON.stringify(data));\n              }\n              cy.get(domSelectors.drawer, { timeout }).within(() => {\n                cy.contains('Submit').click({\n                  force: true,\n                });\n              });\n            });\n\n            cy.wait(300);\n            if (shouldValid === true) {\n              cy.get(domSelectors.drawer).should('not.exist');\n            } else if (shouldValid === false) {\n              cy.get(this.selector.notification).should('contain', 'Invalid plugin data');\n\n              cy.get(domSelectors.close).click({\n                force: true,\n                multiple: true,\n              });\n\n              cy.get(domSelectors.drawer, { timeout })\n                .invoke('show')\n                .within(() => {\n                  cy.contains('Cancel').click({\n                    force: true,\n                  });\n                });\n            }\n          });\n        });\n      });\n    });\n```\n\n在中间 `wait()` 部分，因为少了两个 `should()` 来确保点击前 dom 元素已经出现，我不得不使用两个 `wait()` 来解决它在 CI 测试中失败的问题，在我重新翻阅 cypress 的官方文档，和看了几个其他写测试的 PR 之后我才明白问题的关键所在！\n\n接着我将 `wait()` 换成：\n```\n    cy.focused(domSelectors.drawer_wrap).should('exist');\n```\n\n顺利解决了此问题。\n\n后来我又重新的翻阅 cypress 的官方文档后，去阅读更深层的测试 dom 的原理，发现应该尽可能多地在测试中使用 `should` 方法，来确保每一个 dom 元素的出现，再继续进行后面的测试，以及我们不应该使用 wait 方法在测试中，我们不必花费任何的时间去做多余的等待，经过这点我对 weadb 技术有了更深一步的认识和了解，我们不仅应该确保测试的正常运行，还需要提高测试的稳定性，和完整性。因为它是一门非常严谨的语言！\n\n### Fix: Bug\n\n还有一件令我很有感触的事情，之前我一直很疑惑为什么读别人写的代码，抄别人写过的代码也可以学习很多东西，直到在之后处理一个控制台上的，插件 bug 的这个过程中，我有了非常深刻的认识：\n\n1. 首先，我必须了解有关这个 bug 部分代码的每一行代码的作用。也就是读懂每一行代码的功能。\n2. 其次，我需要明白出现 bug 的原因是什么，有可能是那部分的功能影响到它，以及我需要准确的找出它所在的位置，这更加考验了阅读代码的能力，与理解能力。\n3. 接着，需要将重点关注的地方，一个一个打印出来，来确认是否是这些地方出现的问题，加以分析解决。\n4. 最后，就是通过对整个过程的理解和分析，来确认问题出现的关键，往往正确找到问题的所在，就可以顺利的解决问题！\n\n整个过程下来，的确可以学习很多东西，又可以加深对代码的理解，还可以学到自己未能注意到的地方！\n\n### 从 Review 中学习\n\n再然后就是帮别人 review 代码的过程，这个过程我同样是颇有感触，一件未做过的时候，第一次做的时候一定要花费足够的时间去处理它，因为你不知道你会遇到什么问题，更不可大意对待它！\n\n帮别人 review 的过程中，需要更加的认真和仔细，不明白的地方要敢于去询问，询问的过程也是学习的过程，而且在看别人写的代码的过程中，可以学到很多自己未曾注意到的地方，确确实实，相同的功能，每个人写出来的代码可能会各有差异，这也让我体会到了，这门技术的广泛与强大！\n\n### 反思总结\n\n最后，总结反思几件生活中所遇到的事情。\n\n第一，答应过别人的事情，一定一定要做到，如果确确实实有困难，也一定要提前及时的说出来告知对方，绝对不要因为自己错误的计算时间，计划事情而耽误别人，这样不但丢了信任，还会耽误到别人！\n\n第二，做每一件事不可因为简单，就大意对待，反而应该更加的去注意，不要犯一些小差错，往往小差错会产生更大的问题，务必要谨慎对待，细心检查！\n\n第三，计划事情一定要留出充分的时间，当前一件事情被耽搁的时候，要考虑充分，及时做出合理安排，立马去做放下它，去做别的事情，许多事情是一个循序渐进的过程，不能因为自己的倔强和死磕，而耽误其他事情的进行，这样只会把事情越积攒越多，反而会耽误更多的事情！\n\n第四，自己说过的话就一定要完成它，不要随意的立下目标，说话要考虑充分，少一些急躁，多一些沉稳，要考虑清楚再说。\n\n第五，做开发的过程，一定要先想清楚再动手，不要盲目的去尝试，严谨的技术，不是靠试出来的，要先分析清楚，想明白逻辑，要养成画草图的习惯，再动手去做，这样才能更加的有效利用时间，不会做很多的无用功！\n\n最后，既然决定学习 web 技术就一定要好好加油，继续不能松懈，比你还牛的人还在努力，你没有任何道理可以松懈下来！要多反思自己，把不好的习惯及时改掉！总结下来，我可以不会，但不能不想学，反而一定要因为不会，所以才更应该努力的去学！\n","slug":"2021-2-12","published":1,"updated":"2022-01-07T05:39:14.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky403nez0001crul27151qpd","content":"<h2 id=\"谈近四个月学-web-的感受和反思\"><a href=\"#谈近四个月学-web-的感受和反思\" class=\"headerlink\" title=\"谈近四个月学 web 的感受和反思\"></a>谈近四个月学 web 的感受和反思</h2><p>2021-2-12</p>\n<p>不知不觉已经学 web 技术半年了，反思近来做的事，从之前对各种技术的一概不知道，慢慢到现在知道该如何去学习，去解决一些问题，尽管是一些简单的问题，但是却需要我去花大量的时间去解决它，每次解决的过程都收获很大。</p>\n<hr>\n<h3 id=\"Cypress\"><a href=\"#Cypress\" class=\"headerlink\" title=\"Cypress\"></a>Cypress</h3><p>先从最近的来说，最近写了很多的前端测试案例，从刚开始写的时候只会跟着文档，和已经写好的一些案例来模仿，再到之后提交到 github 上时，CI 测试各种失败的过程，我越发觉得 web 技术是一门非常严谨的技术，可能一点的逻辑问题就会造成案例在 CI 中的失败，列举一个困扰我很久的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cypress.Commands.add(&#x27;configurePlugins&#x27;, (cases) =&gt; &#123;</span><br><span class=\"line\">  const timeout = 300;</span><br><span class=\"line\">  const domSelectors = &#123;</span><br><span class=\"line\">    name: &#x27;[data-cy-plugin-name]&#x27;,</span><br><span class=\"line\">    parents: &#x27;.ant-card-bordered&#x27;,</span><br><span class=\"line\">    drawer_wrap: &#x27;.ant-drawer-content-wrapper&#x27;,</span><br><span class=\"line\">    drawer: &#x27;.ant-drawer-content&#x27;,</span><br><span class=\"line\">    switch: &#x27;#disable&#x27;,</span><br><span class=\"line\">    close: &#x27;.anticon-close&#x27;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  cy.get(domSelectors.name, &#123; timeout &#125;).then(function (cards) &#123;</span><br><span class=\"line\">    [...cards].forEach((card) =&gt; &#123;</span><br><span class=\"line\">      const name = card.innerText;</span><br><span class=\"line\">      const pluginCases = cases[name] || [];</span><br><span class=\"line\">      // eslint-disable-next-line consistent-return</span><br><span class=\"line\">      pluginCases.forEach((&#123; shouldValid, data, type = &#x27;&#x27; &#125;) =&gt; &#123;</span><br><span class=\"line\">        if (type === &#x27;consumer&#x27;) &#123;</span><br><span class=\"line\">          return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.contains(name)</span><br><span class=\"line\">          .parents(domSelectors.parents)</span><br><span class=\"line\">          .within(() =&gt; &#123;</span><br><span class=\"line\">            cy.contains(&#x27;Enable&#x27;).click(&#123;</span><br><span class=\"line\">              force: true,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // NOTE: wait for the Drawer to appear on the DOM</span><br><span class=\"line\">        cy.wait(300);</span><br><span class=\"line\">        cy.get(domSelectors.drawer, &#123; timeout &#125;).within(() =&gt; &#123;</span><br><span class=\"line\">          cy.get(domSelectors.switch).click(&#123;</span><br><span class=\"line\">            force: true,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.window().then((&#123; codemirror &#125;) =&gt; &#123;</span><br><span class=\"line\">          if (codemirror) &#123;</span><br><span class=\"line\">            codemirror.setValue(JSON.stringify(data));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          cy.get(domSelectors.drawer, &#123; timeout &#125;).within(() =&gt; &#123;</span><br><span class=\"line\">            cy.contains(&#x27;Submit&#x27;).click(&#123;</span><br><span class=\"line\">              force: true,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.wait(300);</span><br><span class=\"line\">        if (shouldValid === true) &#123;</span><br><span class=\"line\">          cy.get(domSelectors.drawer).should(&#x27;not.exist&#x27;);</span><br><span class=\"line\">        &#125; else if (shouldValid === false) &#123;</span><br><span class=\"line\">          cy.get(this.selector.notification).should(&#x27;contain&#x27;, &#x27;Invalid plugin data&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">          cy.get(domSelectors.close).click(&#123;</span><br><span class=\"line\">            force: true,</span><br><span class=\"line\">            multiple: true,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          cy.get(domSelectors.drawer, &#123; timeout &#125;)</span><br><span class=\"line\">            .invoke(&#x27;show&#x27;)</span><br><span class=\"line\">            .within(() =&gt; &#123;</span><br><span class=\"line\">              cy.contains(&#x27;Cancel&#x27;).click(&#123;</span><br><span class=\"line\">                force: true,</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在中间 <code>wait()</code> 部分，因为少了两个 <code>should()</code> 来确保点击前 dom 元素已经出现，我不得不使用两个 <code>wait()</code> 来解决它在 CI 测试中失败的问题，在我重新翻阅 cypress 的官方文档，和看了几个其他写测试的 PR 之后我才明白问题的关键所在！</p>\n<p>接着我将 <code>wait()</code> 换成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.focused(domSelectors.drawer_wrap).should(&#x27;exist&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>顺利解决了此问题。</p>\n<p>后来我又重新的翻阅 cypress 的官方文档后，去阅读更深层的测试 dom 的原理，发现应该尽可能多地在测试中使用 <code>should</code> 方法，来确保每一个 dom 元素的出现，再继续进行后面的测试，以及我们不应该使用 wait 方法在测试中，我们不必花费任何的时间去做多余的等待，经过这点我对 weadb 技术有了更深一步的认识和了解，我们不仅应该确保测试的正常运行，还需要提高测试的稳定性，和完整性。因为它是一门非常严谨的语言！</p>\n<h3 id=\"Fix-Bug\"><a href=\"#Fix-Bug\" class=\"headerlink\" title=\"Fix: Bug\"></a>Fix: Bug</h3><p>还有一件令我很有感触的事情，之前我一直很疑惑为什么读别人写的代码，抄别人写过的代码也可以学习很多东西，直到在之后处理一个控制台上的，插件 bug 的这个过程中，我有了非常深刻的认识：</p>\n<ol>\n<li>首先，我必须了解有关这个 bug 部分代码的每一行代码的作用。也就是读懂每一行代码的功能。</li>\n<li>其次，我需要明白出现 bug 的原因是什么，有可能是那部分的功能影响到它，以及我需要准确的找出它所在的位置，这更加考验了阅读代码的能力，与理解能力。</li>\n<li>接着，需要将重点关注的地方，一个一个打印出来，来确认是否是这些地方出现的问题，加以分析解决。</li>\n<li>最后，就是通过对整个过程的理解和分析，来确认问题出现的关键，往往正确找到问题的所在，就可以顺利的解决问题！</li>\n</ol>\n<p>整个过程下来，的确可以学习很多东西，又可以加深对代码的理解，还可以学到自己未能注意到的地方！</p>\n<h3 id=\"从-Review-中学习\"><a href=\"#从-Review-中学习\" class=\"headerlink\" title=\"从 Review 中学习\"></a>从 Review 中学习</h3><p>再然后就是帮别人 review 代码的过程，这个过程我同样是颇有感触，一件未做过的时候，第一次做的时候一定要花费足够的时间去处理它，因为你不知道你会遇到什么问题，更不可大意对待它！</p>\n<p>帮别人 review 的过程中，需要更加的认真和仔细，不明白的地方要敢于去询问，询问的过程也是学习的过程，而且在看别人写的代码的过程中，可以学到很多自己未曾注意到的地方，确确实实，相同的功能，每个人写出来的代码可能会各有差异，这也让我体会到了，这门技术的广泛与强大！</p>\n<h3 id=\"反思总结\"><a href=\"#反思总结\" class=\"headerlink\" title=\"反思总结\"></a>反思总结</h3><p>最后，总结反思几件生活中所遇到的事情。</p>\n<p>第一，答应过别人的事情，一定一定要做到，如果确确实实有困难，也一定要提前及时的说出来告知对方，绝对不要因为自己错误的计算时间，计划事情而耽误别人，这样不但丢了信任，还会耽误到别人！</p>\n<p>第二，做每一件事不可因为简单，就大意对待，反而应该更加的去注意，不要犯一些小差错，往往小差错会产生更大的问题，务必要谨慎对待，细心检查！</p>\n<p>第三，计划事情一定要留出充分的时间，当前一件事情被耽搁的时候，要考虑充分，及时做出合理安排，立马去做放下它，去做别的事情，许多事情是一个循序渐进的过程，不能因为自己的倔强和死磕，而耽误其他事情的进行，这样只会把事情越积攒越多，反而会耽误更多的事情！</p>\n<p>第四，自己说过的话就一定要完成它，不要随意的立下目标，说话要考虑充分，少一些急躁，多一些沉稳，要考虑清楚再说。</p>\n<p>第五，做开发的过程，一定要先想清楚再动手，不要盲目的去尝试，严谨的技术，不是靠试出来的，要先分析清楚，想明白逻辑，要养成画草图的习惯，再动手去做，这样才能更加的有效利用时间，不会做很多的无用功！</p>\n<p>最后，既然决定学习 web 技术就一定要好好加油，继续不能松懈，比你还牛的人还在努力，你没有任何道理可以松懈下来！要多反思自己，把不好的习惯及时改掉！总结下来，我可以不会，但不能不想学，反而一定要因为不会，所以才更应该努力的去学！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"谈近四个月学-web-的感受和反思\"><a href=\"#谈近四个月学-web-的感受和反思\" class=\"headerlink\" title=\"谈近四个月学 web 的感受和反思\"></a>谈近四个月学 web 的感受和反思</h2><p>2021-2-12</p>\n<p>不知不觉已经学 web 技术半年了，反思近来做的事，从之前对各种技术的一概不知道，慢慢到现在知道该如何去学习，去解决一些问题，尽管是一些简单的问题，但是却需要我去花大量的时间去解决它，每次解决的过程都收获很大。</p>\n<hr>\n<h3 id=\"Cypress\"><a href=\"#Cypress\" class=\"headerlink\" title=\"Cypress\"></a>Cypress</h3><p>先从最近的来说，最近写了很多的前端测试案例，从刚开始写的时候只会跟着文档，和已经写好的一些案例来模仿，再到之后提交到 github 上时，CI 测试各种失败的过程，我越发觉得 web 技术是一门非常严谨的技术，可能一点的逻辑问题就会造成案例在 CI 中的失败，列举一个困扰我很久的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cypress.Commands.add(&#x27;configurePlugins&#x27;, (cases) =&gt; &#123;</span><br><span class=\"line\">  const timeout = 300;</span><br><span class=\"line\">  const domSelectors = &#123;</span><br><span class=\"line\">    name: &#x27;[data-cy-plugin-name]&#x27;,</span><br><span class=\"line\">    parents: &#x27;.ant-card-bordered&#x27;,</span><br><span class=\"line\">    drawer_wrap: &#x27;.ant-drawer-content-wrapper&#x27;,</span><br><span class=\"line\">    drawer: &#x27;.ant-drawer-content&#x27;,</span><br><span class=\"line\">    switch: &#x27;#disable&#x27;,</span><br><span class=\"line\">    close: &#x27;.anticon-close&#x27;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  cy.get(domSelectors.name, &#123; timeout &#125;).then(function (cards) &#123;</span><br><span class=\"line\">    [...cards].forEach((card) =&gt; &#123;</span><br><span class=\"line\">      const name = card.innerText;</span><br><span class=\"line\">      const pluginCases = cases[name] || [];</span><br><span class=\"line\">      // eslint-disable-next-line consistent-return</span><br><span class=\"line\">      pluginCases.forEach((&#123; shouldValid, data, type = &#x27;&#x27; &#125;) =&gt; &#123;</span><br><span class=\"line\">        if (type === &#x27;consumer&#x27;) &#123;</span><br><span class=\"line\">          return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.contains(name)</span><br><span class=\"line\">          .parents(domSelectors.parents)</span><br><span class=\"line\">          .within(() =&gt; &#123;</span><br><span class=\"line\">            cy.contains(&#x27;Enable&#x27;).click(&#123;</span><br><span class=\"line\">              force: true,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        // NOTE: wait for the Drawer to appear on the DOM</span><br><span class=\"line\">        cy.wait(300);</span><br><span class=\"line\">        cy.get(domSelectors.drawer, &#123; timeout &#125;).within(() =&gt; &#123;</span><br><span class=\"line\">          cy.get(domSelectors.switch).click(&#123;</span><br><span class=\"line\">            force: true,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.window().then((&#123; codemirror &#125;) =&gt; &#123;</span><br><span class=\"line\">          if (codemirror) &#123;</span><br><span class=\"line\">            codemirror.setValue(JSON.stringify(data));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          cy.get(domSelectors.drawer, &#123; timeout &#125;).within(() =&gt; &#123;</span><br><span class=\"line\">            cy.contains(&#x27;Submit&#x27;).click(&#123;</span><br><span class=\"line\">              force: true,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.wait(300);</span><br><span class=\"line\">        if (shouldValid === true) &#123;</span><br><span class=\"line\">          cy.get(domSelectors.drawer).should(&#x27;not.exist&#x27;);</span><br><span class=\"line\">        &#125; else if (shouldValid === false) &#123;</span><br><span class=\"line\">          cy.get(this.selector.notification).should(&#x27;contain&#x27;, &#x27;Invalid plugin data&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">          cy.get(domSelectors.close).click(&#123;</span><br><span class=\"line\">            force: true,</span><br><span class=\"line\">            multiple: true,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">          cy.get(domSelectors.drawer, &#123; timeout &#125;)</span><br><span class=\"line\">            .invoke(&#x27;show&#x27;)</span><br><span class=\"line\">            .within(() =&gt; &#123;</span><br><span class=\"line\">              cy.contains(&#x27;Cancel&#x27;).click(&#123;</span><br><span class=\"line\">                force: true,</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在中间 <code>wait()</code> 部分，因为少了两个 <code>should()</code> 来确保点击前 dom 元素已经出现，我不得不使用两个 <code>wait()</code> 来解决它在 CI 测试中失败的问题，在我重新翻阅 cypress 的官方文档，和看了几个其他写测试的 PR 之后我才明白问题的关键所在！</p>\n<p>接着我将 <code>wait()</code> 换成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.focused(domSelectors.drawer_wrap).should(&#x27;exist&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>顺利解决了此问题。</p>\n<p>后来我又重新的翻阅 cypress 的官方文档后，去阅读更深层的测试 dom 的原理，发现应该尽可能多地在测试中使用 <code>should</code> 方法，来确保每一个 dom 元素的出现，再继续进行后面的测试，以及我们不应该使用 wait 方法在测试中，我们不必花费任何的时间去做多余的等待，经过这点我对 weadb 技术有了更深一步的认识和了解，我们不仅应该确保测试的正常运行，还需要提高测试的稳定性，和完整性。因为它是一门非常严谨的语言！</p>\n<h3 id=\"Fix-Bug\"><a href=\"#Fix-Bug\" class=\"headerlink\" title=\"Fix: Bug\"></a>Fix: Bug</h3><p>还有一件令我很有感触的事情，之前我一直很疑惑为什么读别人写的代码，抄别人写过的代码也可以学习很多东西，直到在之后处理一个控制台上的，插件 bug 的这个过程中，我有了非常深刻的认识：</p>\n<ol>\n<li>首先，我必须了解有关这个 bug 部分代码的每一行代码的作用。也就是读懂每一行代码的功能。</li>\n<li>其次，我需要明白出现 bug 的原因是什么，有可能是那部分的功能影响到它，以及我需要准确的找出它所在的位置，这更加考验了阅读代码的能力，与理解能力。</li>\n<li>接着，需要将重点关注的地方，一个一个打印出来，来确认是否是这些地方出现的问题，加以分析解决。</li>\n<li>最后，就是通过对整个过程的理解和分析，来确认问题出现的关键，往往正确找到问题的所在，就可以顺利的解决问题！</li>\n</ol>\n<p>整个过程下来，的确可以学习很多东西，又可以加深对代码的理解，还可以学到自己未能注意到的地方！</p>\n<h3 id=\"从-Review-中学习\"><a href=\"#从-Review-中学习\" class=\"headerlink\" title=\"从 Review 中学习\"></a>从 Review 中学习</h3><p>再然后就是帮别人 review 代码的过程，这个过程我同样是颇有感触，一件未做过的时候，第一次做的时候一定要花费足够的时间去处理它，因为你不知道你会遇到什么问题，更不可大意对待它！</p>\n<p>帮别人 review 的过程中，需要更加的认真和仔细，不明白的地方要敢于去询问，询问的过程也是学习的过程，而且在看别人写的代码的过程中，可以学到很多自己未曾注意到的地方，确确实实，相同的功能，每个人写出来的代码可能会各有差异，这也让我体会到了，这门技术的广泛与强大！</p>\n<h3 id=\"反思总结\"><a href=\"#反思总结\" class=\"headerlink\" title=\"反思总结\"></a>反思总结</h3><p>最后，总结反思几件生活中所遇到的事情。</p>\n<p>第一，答应过别人的事情，一定一定要做到，如果确确实实有困难，也一定要提前及时的说出来告知对方，绝对不要因为自己错误的计算时间，计划事情而耽误别人，这样不但丢了信任，还会耽误到别人！</p>\n<p>第二，做每一件事不可因为简单，就大意对待，反而应该更加的去注意，不要犯一些小差错，往往小差错会产生更大的问题，务必要谨慎对待，细心检查！</p>\n<p>第三，计划事情一定要留出充分的时间，当前一件事情被耽搁的时候，要考虑充分，及时做出合理安排，立马去做放下它，去做别的事情，许多事情是一个循序渐进的过程，不能因为自己的倔强和死磕，而耽误其他事情的进行，这样只会把事情越积攒越多，反而会耽误更多的事情！</p>\n<p>第四，自己说过的话就一定要完成它，不要随意的立下目标，说话要考虑充分，少一些急躁，多一些沉稳，要考虑清楚再说。</p>\n<p>第五，做开发的过程，一定要先想清楚再动手，不要盲目的去尝试，严谨的技术，不是靠试出来的，要先分析清楚，想明白逻辑，要养成画草图的习惯，再动手去做，这样才能更加的有效利用时间，不会做很多的无用功！</p>\n<p>最后，既然决定学习 web 技术就一定要好好加油，继续不能松懈，比你还牛的人还在努力，你没有任何道理可以松懈下来！要多反思自己，把不好的习惯及时改掉！总结下来，我可以不会，但不能不想学，反而一定要因为不会，所以才更应该努力的去学！</p>\n"},{"title":"近来三件事情的总结","date":"2020-11-10T16:00:00.000Z","_content":"\n## 近来三件事情的总结\n\n2020-11-11\n\n近一个月来学到了许多新的知识，更加的被 web 技术吸引，新的发现，每当我解决一个新的问题的时候，有的不仅仅是惊喜，还在解决问题的过程中发现了许多新的知识，这让我有机会更多的去了解web。\n\n--------\n\n### 初探 React\n\n最近做了三件事，第一件事是解决了[a7官网](https://www.apiseven.com/zh)上语言切换功能，之前的版本是在子路由点击切换语言按钮的时候会跳转到首页。解决该问题的时候由于我刚开始想的比较复杂，走错了很多方向，探究无果后，最后用了 React 中的两个钩子：`useState` `useEffect` 得以解决。以及`location.pathname`\b得以解决，想了很久的问题，最后用了三行代码搞定，虽然被吊来回改了许多次，但是最后还是很开心成功的解决了该问题。不仅巩固了 React 中两个常用钩子的原理和用法，同时学到了`location.pathname`的使用。至于这些用法，相信大佬们早已了然于心，但对我萌新的我来说，这些对目前的我来说还是非常重要的，当然了大家也可以在各处搜到它们相关的用法和原理，这里这是记录我的学习过程。\n\n### 首次处理 API 数据\n\n第二件事是做了为音博网页新增了三个小`Card`内容，并接上了三个api接口。这是我首次接触处理后端 API 返回的数据的任务，这次经历确确实实又增多了我不少的认识和对数据处理的过程。这三个小`Card`用到了不同的数据，通过不同的 API 接口却又类似的方法最终以图表的形式显示出来，这个过程是我近来接触项目中学到关于后端 API 数据处理块的，最多的一个经历。解决问题的过程几次让我懵圈，因为取到的数据与我需要使用的数据大不相同，我不知该如何下手，从这件事让我明白了:\n\n1. 问问题的时候一定要理清楚思绪再问，并且把自己的想法说清楚，让别人明白自己到哪里卡住了，才能及时有效的获得到帮助。\n\n2. 遇到问题不要传播自己的负面情绪，可能自己暂时解决不出来就自暴自弃，这样也是非常不可取的，要相信一定可以解决掉它，不会的就一点一点的来学。更要不怕被吊的去询问自己不清楚的问题和遇到的难题。\n\n3. 要想清楚再动手，很多问题如果方向错误是尝试不出来的，在未了解需求和理清楚自己的逻辑是否正确的情况下动手是一个错误的解决办法。\n\n### 用假数据来写页面\n\n第三件事是为[Dashboard](https://github.com/apache/apisix-dashboard) 制作一个 info 详情页，有了为音播接入 API 的经历，这次倒是很明白了该如何去做，解决过程中也遇到了一些之前遇到的数据类型错误问题，但是这次就没有之前那样无措了，知道该从哪里下手，该如何正确的解决它。在学到新的框架知识的同时又稳定了之前新学到的一些知识，因为现在还未得到新的真实的 API 接口，心里还是十分的担心，害怕再出问题，决定明天把项目其他调接口的方法看一看，学一学，顺便为[a7官网](https://www.apiseven.com/zh)更改一点之前早就想改掉的样式把！\n","source":"_posts/2020-11-11.md","raw":"---\ntitle: 近来三件事情的总结\ndate: 2020-11-11\n---\n\n## 近来三件事情的总结\n\n2020-11-11\n\n近一个月来学到了许多新的知识，更加的被 web 技术吸引，新的发现，每当我解决一个新的问题的时候，有的不仅仅是惊喜，还在解决问题的过程中发现了许多新的知识，这让我有机会更多的去了解web。\n\n--------\n\n### 初探 React\n\n最近做了三件事，第一件事是解决了[a7官网](https://www.apiseven.com/zh)上语言切换功能，之前的版本是在子路由点击切换语言按钮的时候会跳转到首页。解决该问题的时候由于我刚开始想的比较复杂，走错了很多方向，探究无果后，最后用了 React 中的两个钩子：`useState` `useEffect` 得以解决。以及`location.pathname`\b得以解决，想了很久的问题，最后用了三行代码搞定，虽然被吊来回改了许多次，但是最后还是很开心成功的解决了该问题。不仅巩固了 React 中两个常用钩子的原理和用法，同时学到了`location.pathname`的使用。至于这些用法，相信大佬们早已了然于心，但对我萌新的我来说，这些对目前的我来说还是非常重要的，当然了大家也可以在各处搜到它们相关的用法和原理，这里这是记录我的学习过程。\n\n### 首次处理 API 数据\n\n第二件事是做了为音博网页新增了三个小`Card`内容，并接上了三个api接口。这是我首次接触处理后端 API 返回的数据的任务，这次经历确确实实又增多了我不少的认识和对数据处理的过程。这三个小`Card`用到了不同的数据，通过不同的 API 接口却又类似的方法最终以图表的形式显示出来，这个过程是我近来接触项目中学到关于后端 API 数据处理块的，最多的一个经历。解决问题的过程几次让我懵圈，因为取到的数据与我需要使用的数据大不相同，我不知该如何下手，从这件事让我明白了:\n\n1. 问问题的时候一定要理清楚思绪再问，并且把自己的想法说清楚，让别人明白自己到哪里卡住了，才能及时有效的获得到帮助。\n\n2. 遇到问题不要传播自己的负面情绪，可能自己暂时解决不出来就自暴自弃，这样也是非常不可取的，要相信一定可以解决掉它，不会的就一点一点的来学。更要不怕被吊的去询问自己不清楚的问题和遇到的难题。\n\n3. 要想清楚再动手，很多问题如果方向错误是尝试不出来的，在未了解需求和理清楚自己的逻辑是否正确的情况下动手是一个错误的解决办法。\n\n### 用假数据来写页面\n\n第三件事是为[Dashboard](https://github.com/apache/apisix-dashboard) 制作一个 info 详情页，有了为音播接入 API 的经历，这次倒是很明白了该如何去做，解决过程中也遇到了一些之前遇到的数据类型错误问题，但是这次就没有之前那样无措了，知道该从哪里下手，该如何正确的解决它。在学到新的框架知识的同时又稳定了之前新学到的一些知识，因为现在还未得到新的真实的 API 接口，心里还是十分的担心，害怕再出问题，决定明天把项目其他调接口的方法看一看，学一学，顺便为[a7官网](https://www.apiseven.com/zh)更改一点之前早就想改掉的样式把！\n","slug":"2020-11-11","published":1,"updated":"2022-01-07T05:38:54.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky403nf10002cruldo1hbuhq","content":"<h2 id=\"近来三件事情的总结\"><a href=\"#近来三件事情的总结\" class=\"headerlink\" title=\"近来三件事情的总结\"></a>近来三件事情的总结</h2><p>2020-11-11</p>\n<p>近一个月来学到了许多新的知识，更加的被 web 技术吸引，新的发现，每当我解决一个新的问题的时候，有的不仅仅是惊喜，还在解决问题的过程中发现了许多新的知识，这让我有机会更多的去了解web。</p>\n<hr>\n<h3 id=\"初探-React\"><a href=\"#初探-React\" class=\"headerlink\" title=\"初探 React\"></a>初探 React</h3><p>最近做了三件事，第一件事是解决了<a href=\"https://www.apiseven.com/zh\">a7官网</a>上语言切换功能，之前的版本是在子路由点击切换语言按钮的时候会跳转到首页。解决该问题的时候由于我刚开始想的比较复杂，走错了很多方向，探究无果后，最后用了 React 中的两个钩子：<code>useState</code> <code>useEffect</code> 得以解决。以及<code>location.pathname</code>\b得以解决，想了很久的问题，最后用了三行代码搞定，虽然被吊来回改了许多次，但是最后还是很开心成功的解决了该问题。不仅巩固了 React 中两个常用钩子的原理和用法，同时学到了<code>location.pathname</code>的使用。至于这些用法，相信大佬们早已了然于心，但对我萌新的我来说，这些对目前的我来说还是非常重要的，当然了大家也可以在各处搜到它们相关的用法和原理，这里这是记录我的学习过程。</p>\n<h3 id=\"首次处理-API-数据\"><a href=\"#首次处理-API-数据\" class=\"headerlink\" title=\"首次处理 API 数据\"></a>首次处理 API 数据</h3><p>第二件事是做了为音博网页新增了三个小<code>Card</code>内容，并接上了三个api接口。这是我首次接触处理后端 API 返回的数据的任务，这次经历确确实实又增多了我不少的认识和对数据处理的过程。这三个小<code>Card</code>用到了不同的数据，通过不同的 API 接口却又类似的方法最终以图表的形式显示出来，这个过程是我近来接触项目中学到关于后端 API 数据处理块的，最多的一个经历。解决问题的过程几次让我懵圈，因为取到的数据与我需要使用的数据大不相同，我不知该如何下手，从这件事让我明白了:</p>\n<ol>\n<li><p>问问题的时候一定要理清楚思绪再问，并且把自己的想法说清楚，让别人明白自己到哪里卡住了，才能及时有效的获得到帮助。</p>\n</li>\n<li><p>遇到问题不要传播自己的负面情绪，可能自己暂时解决不出来就自暴自弃，这样也是非常不可取的，要相信一定可以解决掉它，不会的就一点一点的来学。更要不怕被吊的去询问自己不清楚的问题和遇到的难题。</p>\n</li>\n<li><p>要想清楚再动手，很多问题如果方向错误是尝试不出来的，在未了解需求和理清楚自己的逻辑是否正确的情况下动手是一个错误的解决办法。</p>\n</li>\n</ol>\n<h3 id=\"用假数据来写页面\"><a href=\"#用假数据来写页面\" class=\"headerlink\" title=\"用假数据来写页面\"></a>用假数据来写页面</h3><p>第三件事是为<a href=\"https://github.com/apache/apisix-dashboard\">Dashboard</a> 制作一个 info 详情页，有了为音播接入 API 的经历，这次倒是很明白了该如何去做，解决过程中也遇到了一些之前遇到的数据类型错误问题，但是这次就没有之前那样无措了，知道该从哪里下手，该如何正确的解决它。在学到新的框架知识的同时又稳定了之前新学到的一些知识，因为现在还未得到新的真实的 API 接口，心里还是十分的担心，害怕再出问题，决定明天把项目其他调接口的方法看一看，学一学，顺便为<a href=\"https://www.apiseven.com/zh\">a7官网</a>更改一点之前早就想改掉的样式把！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"近来三件事情的总结\"><a href=\"#近来三件事情的总结\" class=\"headerlink\" title=\"近来三件事情的总结\"></a>近来三件事情的总结</h2><p>2020-11-11</p>\n<p>近一个月来学到了许多新的知识，更加的被 web 技术吸引，新的发现，每当我解决一个新的问题的时候，有的不仅仅是惊喜，还在解决问题的过程中发现了许多新的知识，这让我有机会更多的去了解web。</p>\n<hr>\n<h3 id=\"初探-React\"><a href=\"#初探-React\" class=\"headerlink\" title=\"初探 React\"></a>初探 React</h3><p>最近做了三件事，第一件事是解决了<a href=\"https://www.apiseven.com/zh\">a7官网</a>上语言切换功能，之前的版本是在子路由点击切换语言按钮的时候会跳转到首页。解决该问题的时候由于我刚开始想的比较复杂，走错了很多方向，探究无果后，最后用了 React 中的两个钩子：<code>useState</code> <code>useEffect</code> 得以解决。以及<code>location.pathname</code>\b得以解决，想了很久的问题，最后用了三行代码搞定，虽然被吊来回改了许多次，但是最后还是很开心成功的解决了该问题。不仅巩固了 React 中两个常用钩子的原理和用法，同时学到了<code>location.pathname</code>的使用。至于这些用法，相信大佬们早已了然于心，但对我萌新的我来说，这些对目前的我来说还是非常重要的，当然了大家也可以在各处搜到它们相关的用法和原理，这里这是记录我的学习过程。</p>\n<h3 id=\"首次处理-API-数据\"><a href=\"#首次处理-API-数据\" class=\"headerlink\" title=\"首次处理 API 数据\"></a>首次处理 API 数据</h3><p>第二件事是做了为音博网页新增了三个小<code>Card</code>内容，并接上了三个api接口。这是我首次接触处理后端 API 返回的数据的任务，这次经历确确实实又增多了我不少的认识和对数据处理的过程。这三个小<code>Card</code>用到了不同的数据，通过不同的 API 接口却又类似的方法最终以图表的形式显示出来，这个过程是我近来接触项目中学到关于后端 API 数据处理块的，最多的一个经历。解决问题的过程几次让我懵圈，因为取到的数据与我需要使用的数据大不相同，我不知该如何下手，从这件事让我明白了:</p>\n<ol>\n<li><p>问问题的时候一定要理清楚思绪再问，并且把自己的想法说清楚，让别人明白自己到哪里卡住了，才能及时有效的获得到帮助。</p>\n</li>\n<li><p>遇到问题不要传播自己的负面情绪，可能自己暂时解决不出来就自暴自弃，这样也是非常不可取的，要相信一定可以解决掉它，不会的就一点一点的来学。更要不怕被吊的去询问自己不清楚的问题和遇到的难题。</p>\n</li>\n<li><p>要想清楚再动手，很多问题如果方向错误是尝试不出来的，在未了解需求和理清楚自己的逻辑是否正确的情况下动手是一个错误的解决办法。</p>\n</li>\n</ol>\n<h3 id=\"用假数据来写页面\"><a href=\"#用假数据来写页面\" class=\"headerlink\" title=\"用假数据来写页面\"></a>用假数据来写页面</h3><p>第三件事是为<a href=\"https://github.com/apache/apisix-dashboard\">Dashboard</a> 制作一个 info 详情页，有了为音播接入 API 的经历，这次倒是很明白了该如何去做，解决过程中也遇到了一些之前遇到的数据类型错误问题，但是这次就没有之前那样无措了，知道该从哪里下手，该如何正确的解决它。在学到新的框架知识的同时又稳定了之前新学到的一些知识，因为现在还未得到新的真实的 API 接口，心里还是十分的担心，害怕再出问题，决定明天把项目其他调接口的方法看一看，学一学，顺便为<a href=\"https://www.apiseven.com/zh\">a7官网</a>更改一点之前早就想改掉的样式把！</p>\n"},{"title":"读开源项目《antd-design》源代码第一天","date":"2021-03-06T16:00:00.000Z","_content":"\n## 读开源项目《antd-design》源代码第一天\n\n2021-3-7\n\n今天开始仔细阅读《antd-design》源码，首先看了源码部分的`components`中的`button`，本身就知道它一定很有难度，所以刚开始就选择了我认为较简单的`button`部分，在本地把项目跑起来后，进入到 button 页面，再仔细观看源码部分，我有点吃惊，仿佛打开了新的认知。\n\n--------\n\n组件页面的每个小例子竟然都是一篇独立的`markdown`，通过多篇`markdown`组成了一整个页面。一方面认识到原来`markdown`还可以这么用，之前还一直很好奇把这么多例子写在每个页面中，代码一定特别繁琐，这样看来，果真是我太小白了。\n\n接着我开始仔细翻阅`button`中的主要代码。第一遍我先把整页代码过了一遍，看看能不能读清楚然后将它完整的理解下来，结果我发现了许多不认识的方法函数！因此我开始慢速的读第二遍，开始记录一些我不清楚的点，主要分为两方面：1. 之前没见到过的。2. 眼熟但是已经记不清楚用法的地方。\n\n### 记录未明白的地方\n\n#### 项目结构\n\n我大概看了一下项目结构，起初我认为每个组件是一个独立的页面所构成的。但是我看到`button`文件的代码中，还有许多的逻辑，和数据的类型分类。因此我猜想整体的页面可能就只有首页、组件页、文档页这类，所有的组件应该是复用了一套逻辑，既然我现在要看组件页，那这里的代码一定是各个按钮如何构成并且通过这些复杂的逻辑来实现的。想明白这些，我开始耐心的去看每一行代码。（在最近的学习与探索过程中，我发现在学习新的东西的时候，刚开始一定会有许多许多不认识、不明白的地方。这种时候更加不可心急，反而更应该耐下心来，一点一点看，一点一点的去分析去理解。）\n\n#### 从代码中学习\n\n```tsx\nconst rxTwoCNChar = /^[\\u4e00-\\u9fa5]{2}$/;\nconst isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\nfunction isString(str: any) {\n  return typeof str === 'string';\n}\n\nfunction isUnborderedButtonType(type: ButtonType | undefined) {\n  return type === 'text' || type === 'link';\n}\n// Insert one space between two chinese characters automatically.\nfunction insertSpace(child: React.ReactChild, needInserted: boolean) {\n  // Check the child if is undefined or null.\n  if (child == null) {\n    return;\n  }\n  const SPACE = needInserted ? ' ' : '';\n  // strictNullChecks oops.\n  if (\n    typeof child !== 'string' &&\n    typeof child !== 'number' &&\n    isString(child.type) &&\n    isTwoCNChar(child.props.children)\n  ) {\n    return cloneElement(child, {\n      children: child.props.children.split('').join(SPACE),\n    });\n  }\n  if (typeof child === 'string') {\n    if (isTwoCNChar(child)) {\n      child = child.split('').join(SPACE);\n    }\n    return <span>{child}</span>;\n  }\n  return child;\n}\n```\n\n在代码的开头我就开始不明白了。我首先查询了`rxTwoCnchar`的声明，然后明白这些是强大的正则匹配，和jQuery的知识！查过之后才明白，这里是用 jQuery 为文本绑定了一个方法：用正则匹配将每个字符串都分隔开，为之后给每个字体中间加空格做准备。\n\njQuery:\n1. `.text`: 设置或返回所选元素的文本内容。\n\n2. `.bind`: 绑定事件，为所选元素添加一个或者多个事件处理程序，以及当事件发生时运行的函数。\n\n接着我又查询了`split`和`join`的用法。之前一直以为它们只在 JS 中有，一查发现在 Python 中也要这两种方法。\n1. `split`是 Python 中通过制定分隔符对字符串进行切片，如果有 num ,则代表分隔 num +1 个字符串。\n2. `join`是 SQL 中的连接，我将它理解为数学中多个集合的交集的结果，根据需要取不同的结果部分，就是将符合`join`中的所有条件的值都组合起来。\n\n接着往下读代码又认识了一个 React 的一个克隆 API：`cloneElement`，此 API 以 element 元素为样板克隆并且返回新的 React 元素，注意：**新的子元素将取代现有的子元素，而来自原始的元素的 key 和 ref 将被保留。**\n\nReact.cloneElement()几乎等同于：\n\n```tsx\n<element.type {...element.props} {...props}>{children}</element.type>\n```\n\n**useContext**\n\n之前已经看到了 React 中几个常用 Hooks 的讲解和用法，它突然出现的时候我对此 Hook 已经不记得它的具体用法，因此我把它重新回顾学习了一下并且在这里记录下来。\n\n```tsx\nconst value = useContext(MyContext);\n```\n\n介绍：该 Hook 接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 `<Mycontext.Provider>`的 value prop 决定。\n\n当组件上层中最近的 `<Mycontext.Provider>`更新时，该 Hook 会触发重新渲染，并使用最新传递个 Mycontext provider 的 context value 值。即使祖先使用 React.memo 或 shouldComponentUpdate，也会在组件本身使用 useContext 时重新渲染。**useContext 的参数必须是对象本身**\n\n`React.memo`\n\n```tsx\nconst MyComponent = React.memo(function MyComponent(props) {\n  /* 使用 props 渲染 */\n});\n```\n\n介绍：如果你的组件在相同 props 的情况下渲染相同的结果，那么可以通过将其包装在 React.memo 中调用，它通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。\n\n它仅检查 props 变更。如果函数组件被 React.memo 包裹，且其实现中拥有 useState 或者 useContext 的 Hook，当 context 发生变化时仍会重新渲染。**此方法用于性能优化使用，不要依赖它来阻止渲染。**\n\n**Python 的 count() 方法** 是用于统计字符串中某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。语法：\n\n```\nstr.count(sub, start= 0,end=len(string))\n```\n1. sub --搜索的子字符串。\n2. start --字符串开始搜索的位置。默认为第一个字符，索引值为0。\n3. end --字符串中结束搜索的位置。字符中的第一个字符的索引为0。默认为字符串的最后一个位置。\n\n返回子字符串在字符串中出现的次数。\n\n#### 暂时总结\n\n今天暂时先探究到这里啦！\b想不到通过读源码可以学到更多更广的知识，每一行代码都有可学习的地方。\n","source":"_posts/2021-3-7.md","raw":"---\ntitle: 读开源项目《antd-design》源代码第一天\ndate: 2021-03-07\n---\n\n## 读开源项目《antd-design》源代码第一天\n\n2021-3-7\n\n今天开始仔细阅读《antd-design》源码，首先看了源码部分的`components`中的`button`，本身就知道它一定很有难度，所以刚开始就选择了我认为较简单的`button`部分，在本地把项目跑起来后，进入到 button 页面，再仔细观看源码部分，我有点吃惊，仿佛打开了新的认知。\n\n--------\n\n组件页面的每个小例子竟然都是一篇独立的`markdown`，通过多篇`markdown`组成了一整个页面。一方面认识到原来`markdown`还可以这么用，之前还一直很好奇把这么多例子写在每个页面中，代码一定特别繁琐，这样看来，果真是我太小白了。\n\n接着我开始仔细翻阅`button`中的主要代码。第一遍我先把整页代码过了一遍，看看能不能读清楚然后将它完整的理解下来，结果我发现了许多不认识的方法函数！因此我开始慢速的读第二遍，开始记录一些我不清楚的点，主要分为两方面：1. 之前没见到过的。2. 眼熟但是已经记不清楚用法的地方。\n\n### 记录未明白的地方\n\n#### 项目结构\n\n我大概看了一下项目结构，起初我认为每个组件是一个独立的页面所构成的。但是我看到`button`文件的代码中，还有许多的逻辑，和数据的类型分类。因此我猜想整体的页面可能就只有首页、组件页、文档页这类，所有的组件应该是复用了一套逻辑，既然我现在要看组件页，那这里的代码一定是各个按钮如何构成并且通过这些复杂的逻辑来实现的。想明白这些，我开始耐心的去看每一行代码。（在最近的学习与探索过程中，我发现在学习新的东西的时候，刚开始一定会有许多许多不认识、不明白的地方。这种时候更加不可心急，反而更应该耐下心来，一点一点看，一点一点的去分析去理解。）\n\n#### 从代码中学习\n\n```tsx\nconst rxTwoCNChar = /^[\\u4e00-\\u9fa5]{2}$/;\nconst isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);\nfunction isString(str: any) {\n  return typeof str === 'string';\n}\n\nfunction isUnborderedButtonType(type: ButtonType | undefined) {\n  return type === 'text' || type === 'link';\n}\n// Insert one space between two chinese characters automatically.\nfunction insertSpace(child: React.ReactChild, needInserted: boolean) {\n  // Check the child if is undefined or null.\n  if (child == null) {\n    return;\n  }\n  const SPACE = needInserted ? ' ' : '';\n  // strictNullChecks oops.\n  if (\n    typeof child !== 'string' &&\n    typeof child !== 'number' &&\n    isString(child.type) &&\n    isTwoCNChar(child.props.children)\n  ) {\n    return cloneElement(child, {\n      children: child.props.children.split('').join(SPACE),\n    });\n  }\n  if (typeof child === 'string') {\n    if (isTwoCNChar(child)) {\n      child = child.split('').join(SPACE);\n    }\n    return <span>{child}</span>;\n  }\n  return child;\n}\n```\n\n在代码的开头我就开始不明白了。我首先查询了`rxTwoCnchar`的声明，然后明白这些是强大的正则匹配，和jQuery的知识！查过之后才明白，这里是用 jQuery 为文本绑定了一个方法：用正则匹配将每个字符串都分隔开，为之后给每个字体中间加空格做准备。\n\njQuery:\n1. `.text`: 设置或返回所选元素的文本内容。\n\n2. `.bind`: 绑定事件，为所选元素添加一个或者多个事件处理程序，以及当事件发生时运行的函数。\n\n接着我又查询了`split`和`join`的用法。之前一直以为它们只在 JS 中有，一查发现在 Python 中也要这两种方法。\n1. `split`是 Python 中通过制定分隔符对字符串进行切片，如果有 num ,则代表分隔 num +1 个字符串。\n2. `join`是 SQL 中的连接，我将它理解为数学中多个集合的交集的结果，根据需要取不同的结果部分，就是将符合`join`中的所有条件的值都组合起来。\n\n接着往下读代码又认识了一个 React 的一个克隆 API：`cloneElement`，此 API 以 element 元素为样板克隆并且返回新的 React 元素，注意：**新的子元素将取代现有的子元素，而来自原始的元素的 key 和 ref 将被保留。**\n\nReact.cloneElement()几乎等同于：\n\n```tsx\n<element.type {...element.props} {...props}>{children}</element.type>\n```\n\n**useContext**\n\n之前已经看到了 React 中几个常用 Hooks 的讲解和用法，它突然出现的时候我对此 Hook 已经不记得它的具体用法，因此我把它重新回顾学习了一下并且在这里记录下来。\n\n```tsx\nconst value = useContext(MyContext);\n```\n\n介绍：该 Hook 接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 `<Mycontext.Provider>`的 value prop 决定。\n\n当组件上层中最近的 `<Mycontext.Provider>`更新时，该 Hook 会触发重新渲染，并使用最新传递个 Mycontext provider 的 context value 值。即使祖先使用 React.memo 或 shouldComponentUpdate，也会在组件本身使用 useContext 时重新渲染。**useContext 的参数必须是对象本身**\n\n`React.memo`\n\n```tsx\nconst MyComponent = React.memo(function MyComponent(props) {\n  /* 使用 props 渲染 */\n});\n```\n\n介绍：如果你的组件在相同 props 的情况下渲染相同的结果，那么可以通过将其包装在 React.memo 中调用，它通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。\n\n它仅检查 props 变更。如果函数组件被 React.memo 包裹，且其实现中拥有 useState 或者 useContext 的 Hook，当 context 发生变化时仍会重新渲染。**此方法用于性能优化使用，不要依赖它来阻止渲染。**\n\n**Python 的 count() 方法** 是用于统计字符串中某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。语法：\n\n```\nstr.count(sub, start= 0,end=len(string))\n```\n1. sub --搜索的子字符串。\n2. start --字符串开始搜索的位置。默认为第一个字符，索引值为0。\n3. end --字符串中结束搜索的位置。字符中的第一个字符的索引为0。默认为字符串的最后一个位置。\n\n返回子字符串在字符串中出现的次数。\n\n#### 暂时总结\n\n今天暂时先探究到这里啦！\b想不到通过读源码可以学到更多更广的知识，每一行代码都有可学习的地方。\n","slug":"2021-3-7","published":1,"updated":"2022-01-07T05:39:22.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky403nf20003crul801wa7bf","content":"<h2 id=\"读开源项目《antd-design》源代码第一天\"><a href=\"#读开源项目《antd-design》源代码第一天\" class=\"headerlink\" title=\"读开源项目《antd-design》源代码第一天\"></a>读开源项目《antd-design》源代码第一天</h2><p>2021-3-7</p>\n<p>今天开始仔细阅读《antd-design》源码，首先看了源码部分的<code>components</code>中的<code>button</code>，本身就知道它一定很有难度，所以刚开始就选择了我认为较简单的<code>button</code>部分，在本地把项目跑起来后，进入到 button 页面，再仔细观看源码部分，我有点吃惊，仿佛打开了新的认知。</p>\n<hr>\n<p>组件页面的每个小例子竟然都是一篇独立的<code>markdown</code>，通过多篇<code>markdown</code>组成了一整个页面。一方面认识到原来<code>markdown</code>还可以这么用，之前还一直很好奇把这么多例子写在每个页面中，代码一定特别繁琐，这样看来，果真是我太小白了。</p>\n<p>接着我开始仔细翻阅<code>button</code>中的主要代码。第一遍我先把整页代码过了一遍，看看能不能读清楚然后将它完整的理解下来，结果我发现了许多不认识的方法函数！因此我开始慢速的读第二遍，开始记录一些我不清楚的点，主要分为两方面：1. 之前没见到过的。2. 眼熟但是已经记不清楚用法的地方。</p>\n<h3 id=\"记录未明白的地方\"><a href=\"#记录未明白的地方\" class=\"headerlink\" title=\"记录未明白的地方\"></a>记录未明白的地方</h3><h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p>我大概看了一下项目结构，起初我认为每个组件是一个独立的页面所构成的。但是我看到<code>button</code>文件的代码中，还有许多的逻辑，和数据的类型分类。因此我猜想整体的页面可能就只有首页、组件页、文档页这类，所有的组件应该是复用了一套逻辑，既然我现在要看组件页，那这里的代码一定是各个按钮如何构成并且通过这些复杂的逻辑来实现的。想明白这些，我开始耐心的去看每一行代码。（在最近的学习与探索过程中，我发现在学习新的东西的时候，刚开始一定会有许多许多不认识、不明白的地方。这种时候更加不可心急，反而更应该耐下心来，一点一点看，一点一点的去分析去理解。）</p>\n<h4 id=\"从代码中学习\"><a href=\"#从代码中学习\" class=\"headerlink\" title=\"从代码中学习\"></a>从代码中学习</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const rxTwoCNChar = /^[\\u4e00-\\u9fa5]&#123;2&#125;$/;</span><br><span class=\"line\">const isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);</span><br><span class=\"line\">function isString(str: any) &#123;</span><br><span class=\"line\">  return typeof str === &#x27;string&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isUnborderedButtonType(type: ButtonType | undefined) &#123;</span><br><span class=\"line\">  return type === &#x27;text&#x27; || type === &#x27;link&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// Insert one space between two chinese characters automatically.</span><br><span class=\"line\">function insertSpace(child: React.ReactChild, needInserted: boolean) &#123;</span><br><span class=\"line\">  // Check the child if is undefined or null.</span><br><span class=\"line\">  if (child == null) &#123;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const SPACE = needInserted ? &#x27; &#x27; : &#x27;&#x27;;</span><br><span class=\"line\">  // strictNullChecks oops.</span><br><span class=\"line\">  if (</span><br><span class=\"line\">    typeof child !== &#x27;string&#x27; &amp;&amp;</span><br><span class=\"line\">    typeof child !== &#x27;number&#x27; &amp;&amp;</span><br><span class=\"line\">    isString(child.type) &amp;&amp;</span><br><span class=\"line\">    isTwoCNChar(child.props.children)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    return cloneElement(child, &#123;</span><br><span class=\"line\">      children: child.props.children.split(&#x27;&#x27;).join(SPACE),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (typeof child === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    if (isTwoCNChar(child)) &#123;</span><br><span class=\"line\">      child = child.split(&#x27;&#x27;).join(SPACE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &lt;span&gt;&#123;child&#125;&lt;/span&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return child;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在代码的开头我就开始不明白了。我首先查询了<code>rxTwoCnchar</code>的声明，然后明白这些是强大的正则匹配，和jQuery的知识！查过之后才明白，这里是用 jQuery 为文本绑定了一个方法：用正则匹配将每个字符串都分隔开，为之后给每个字体中间加空格做准备。</p>\n<p>jQuery:</p>\n<ol>\n<li><p><code>.text</code>: 设置或返回所选元素的文本内容。</p>\n</li>\n<li><p><code>.bind</code>: 绑定事件，为所选元素添加一个或者多个事件处理程序，以及当事件发生时运行的函数。</p>\n</li>\n</ol>\n<p>接着我又查询了<code>split</code>和<code>join</code>的用法。之前一直以为它们只在 JS 中有，一查发现在 Python 中也要这两种方法。</p>\n<ol>\n<li><code>split</code>是 Python 中通过制定分隔符对字符串进行切片，如果有 num ,则代表分隔 num +1 个字符串。</li>\n<li><code>join</code>是 SQL 中的连接，我将它理解为数学中多个集合的交集的结果，根据需要取不同的结果部分，就是将符合<code>join</code>中的所有条件的值都组合起来。</li>\n</ol>\n<p>接着往下读代码又认识了一个 React 的一个克隆 API：<code>cloneElement</code>，此 API 以 element 元素为样板克隆并且返回新的 React 元素，注意：<strong>新的子元素将取代现有的子元素，而来自原始的元素的 key 和 ref 将被保留。</strong></p>\n<p>React.cloneElement()几乎等同于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;element.type &#123;...element.props&#125; &#123;...props&#125;&gt;&#123;children&#125;&lt;/element.type&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>useContext</strong></p>\n<p>之前已经看到了 React 中几个常用 Hooks 的讲解和用法，它突然出现的时候我对此 Hook 已经不记得它的具体用法，因此我把它重新回顾学习了一下并且在这里记录下来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const value = useContext(MyContext);</span><br></pre></td></tr></table></figure>\n\n<p>介绍：该 Hook 接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;Mycontext.Provider&gt;</code>的 value prop 决定。</p>\n<p>当组件上层中最近的 <code>&lt;Mycontext.Provider&gt;</code>更新时，该 Hook 会触发重新渲染，并使用最新传递个 Mycontext provider 的 context value 值。即使祖先使用 React.memo 或 shouldComponentUpdate，也会在组件本身使用 useContext 时重新渲染。<strong>useContext 的参数必须是对象本身</strong></p>\n<p><code>React.memo</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MyComponent = React.memo(function MyComponent(props) &#123;</span><br><span class=\"line\">  /* 使用 props 渲染 */</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>介绍：如果你的组件在相同 props 的情况下渲染相同的结果，那么可以通过将其包装在 React.memo 中调用，它通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p>\n<p>它仅检查 props 变更。如果函数组件被 React.memo 包裹，且其实现中拥有 useState 或者 useContext 的 Hook，当 context 发生变化时仍会重新渲染。<strong>此方法用于性能优化使用，不要依赖它来阻止渲染。</strong></p>\n<p><strong>Python 的 count() 方法</strong> 是用于统计字符串中某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.count(sub, start= 0,end=len(string))</span><br></pre></td></tr></table></figure>\n<ol>\n<li>sub –搜索的子字符串。</li>\n<li>start –字符串开始搜索的位置。默认为第一个字符，索引值为0。</li>\n<li>end –字符串中结束搜索的位置。字符中的第一个字符的索引为0。默认为字符串的最后一个位置。</li>\n</ol>\n<p>返回子字符串在字符串中出现的次数。</p>\n<h4 id=\"暂时总结\"><a href=\"#暂时总结\" class=\"headerlink\" title=\"暂时总结\"></a>暂时总结</h4><p>今天暂时先探究到这里啦！\b想不到通过读源码可以学到更多更广的知识，每一行代码都有可学习的地方。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"读开源项目《antd-design》源代码第一天\"><a href=\"#读开源项目《antd-design》源代码第一天\" class=\"headerlink\" title=\"读开源项目《antd-design》源代码第一天\"></a>读开源项目《antd-design》源代码第一天</h2><p>2021-3-7</p>\n<p>今天开始仔细阅读《antd-design》源码，首先看了源码部分的<code>components</code>中的<code>button</code>，本身就知道它一定很有难度，所以刚开始就选择了我认为较简单的<code>button</code>部分，在本地把项目跑起来后，进入到 button 页面，再仔细观看源码部分，我有点吃惊，仿佛打开了新的认知。</p>\n<hr>\n<p>组件页面的每个小例子竟然都是一篇独立的<code>markdown</code>，通过多篇<code>markdown</code>组成了一整个页面。一方面认识到原来<code>markdown</code>还可以这么用，之前还一直很好奇把这么多例子写在每个页面中，代码一定特别繁琐，这样看来，果真是我太小白了。</p>\n<p>接着我开始仔细翻阅<code>button</code>中的主要代码。第一遍我先把整页代码过了一遍，看看能不能读清楚然后将它完整的理解下来，结果我发现了许多不认识的方法函数！因此我开始慢速的读第二遍，开始记录一些我不清楚的点，主要分为两方面：1. 之前没见到过的。2. 眼熟但是已经记不清楚用法的地方。</p>\n<h3 id=\"记录未明白的地方\"><a href=\"#记录未明白的地方\" class=\"headerlink\" title=\"记录未明白的地方\"></a>记录未明白的地方</h3><h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p>我大概看了一下项目结构，起初我认为每个组件是一个独立的页面所构成的。但是我看到<code>button</code>文件的代码中，还有许多的逻辑，和数据的类型分类。因此我猜想整体的页面可能就只有首页、组件页、文档页这类，所有的组件应该是复用了一套逻辑，既然我现在要看组件页，那这里的代码一定是各个按钮如何构成并且通过这些复杂的逻辑来实现的。想明白这些，我开始耐心的去看每一行代码。（在最近的学习与探索过程中，我发现在学习新的东西的时候，刚开始一定会有许多许多不认识、不明白的地方。这种时候更加不可心急，反而更应该耐下心来，一点一点看，一点一点的去分析去理解。）</p>\n<h4 id=\"从代码中学习\"><a href=\"#从代码中学习\" class=\"headerlink\" title=\"从代码中学习\"></a>从代码中学习</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const rxTwoCNChar = /^[\\u4e00-\\u9fa5]&#123;2&#125;$/;</span><br><span class=\"line\">const isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);</span><br><span class=\"line\">function isString(str: any) &#123;</span><br><span class=\"line\">  return typeof str === &#x27;string&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function isUnborderedButtonType(type: ButtonType | undefined) &#123;</span><br><span class=\"line\">  return type === &#x27;text&#x27; || type === &#x27;link&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// Insert one space between two chinese characters automatically.</span><br><span class=\"line\">function insertSpace(child: React.ReactChild, needInserted: boolean) &#123;</span><br><span class=\"line\">  // Check the child if is undefined or null.</span><br><span class=\"line\">  if (child == null) &#123;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const SPACE = needInserted ? &#x27; &#x27; : &#x27;&#x27;;</span><br><span class=\"line\">  // strictNullChecks oops.</span><br><span class=\"line\">  if (</span><br><span class=\"line\">    typeof child !== &#x27;string&#x27; &amp;&amp;</span><br><span class=\"line\">    typeof child !== &#x27;number&#x27; &amp;&amp;</span><br><span class=\"line\">    isString(child.type) &amp;&amp;</span><br><span class=\"line\">    isTwoCNChar(child.props.children)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    return cloneElement(child, &#123;</span><br><span class=\"line\">      children: child.props.children.split(&#x27;&#x27;).join(SPACE),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (typeof child === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    if (isTwoCNChar(child)) &#123;</span><br><span class=\"line\">      child = child.split(&#x27;&#x27;).join(SPACE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &lt;span&gt;&#123;child&#125;&lt;/span&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return child;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在代码的开头我就开始不明白了。我首先查询了<code>rxTwoCnchar</code>的声明，然后明白这些是强大的正则匹配，和jQuery的知识！查过之后才明白，这里是用 jQuery 为文本绑定了一个方法：用正则匹配将每个字符串都分隔开，为之后给每个字体中间加空格做准备。</p>\n<p>jQuery:</p>\n<ol>\n<li><p><code>.text</code>: 设置或返回所选元素的文本内容。</p>\n</li>\n<li><p><code>.bind</code>: 绑定事件，为所选元素添加一个或者多个事件处理程序，以及当事件发生时运行的函数。</p>\n</li>\n</ol>\n<p>接着我又查询了<code>split</code>和<code>join</code>的用法。之前一直以为它们只在 JS 中有，一查发现在 Python 中也要这两种方法。</p>\n<ol>\n<li><code>split</code>是 Python 中通过制定分隔符对字符串进行切片，如果有 num ,则代表分隔 num +1 个字符串。</li>\n<li><code>join</code>是 SQL 中的连接，我将它理解为数学中多个集合的交集的结果，根据需要取不同的结果部分，就是将符合<code>join</code>中的所有条件的值都组合起来。</li>\n</ol>\n<p>接着往下读代码又认识了一个 React 的一个克隆 API：<code>cloneElement</code>，此 API 以 element 元素为样板克隆并且返回新的 React 元素，注意：<strong>新的子元素将取代现有的子元素，而来自原始的元素的 key 和 ref 将被保留。</strong></p>\n<p>React.cloneElement()几乎等同于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;element.type &#123;...element.props&#125; &#123;...props&#125;&gt;&#123;children&#125;&lt;/element.type&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>useContext</strong></p>\n<p>之前已经看到了 React 中几个常用 Hooks 的讲解和用法，它突然出现的时候我对此 Hook 已经不记得它的具体用法，因此我把它重新回顾学习了一下并且在这里记录下来。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const value = useContext(MyContext);</span><br></pre></td></tr></table></figure>\n\n<p>介绍：该 Hook 接收一个 context 对象（React.createContext 的返回值）并返回该 context 的当前值。当前的 context 值由上层组件中距离当前组件最近的 <code>&lt;Mycontext.Provider&gt;</code>的 value prop 决定。</p>\n<p>当组件上层中最近的 <code>&lt;Mycontext.Provider&gt;</code>更新时，该 Hook 会触发重新渲染，并使用最新传递个 Mycontext provider 的 context value 值。即使祖先使用 React.memo 或 shouldComponentUpdate，也会在组件本身使用 useContext 时重新渲染。<strong>useContext 的参数必须是对象本身</strong></p>\n<p><code>React.memo</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MyComponent = React.memo(function MyComponent(props) &#123;</span><br><span class=\"line\">  /* 使用 props 渲染 */</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>介绍：如果你的组件在相同 props 的情况下渲染相同的结果，那么可以通过将其包装在 React.memo 中调用，它通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p>\n<p>它仅检查 props 变更。如果函数组件被 React.memo 包裹，且其实现中拥有 useState 或者 useContext 的 Hook，当 context 发生变化时仍会重新渲染。<strong>此方法用于性能优化使用，不要依赖它来阻止渲染。</strong></p>\n<p><strong>Python 的 count() 方法</strong> 是用于统计字符串中某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str.count(sub, start= 0,end=len(string))</span><br></pre></td></tr></table></figure>\n<ol>\n<li>sub –搜索的子字符串。</li>\n<li>start –字符串开始搜索的位置。默认为第一个字符，索引值为0。</li>\n<li>end –字符串中结束搜索的位置。字符中的第一个字符的索引为0。默认为字符串的最后一个位置。</li>\n</ol>\n<p>返回子字符串在字符串中出现的次数。</p>\n<h4 id=\"暂时总结\"><a href=\"#暂时总结\" class=\"headerlink\" title=\"暂时总结\"></a>暂时总结</h4><p>今天暂时先探究到这里啦！\b想不到通过读源码可以学到更多更广的知识，每一行代码都有可学习的地方。</p>\n"},{"title":"对 Ant Design 定制和使用表单的总结","date":"2021-06-27T16:00:00.000Z","_content":"\n## 对 Ant Design 定制和使用表单的总结\n\n2021-6-28\n\n从今年的 4 月份开始拥有了我踏入 Web 行业以来第一份正式工作，到现在已经过去三个月之久了。这三个月我不仅仅把它当成一份单纯的工作，因为知道自己技术尚浅，只能疯狂的吸收那些自己从来没听过的技术名词，一边慢慢摸索着，一边巩固着自己已经掌握的知识，今天就把近三个月来比较做的较为深刻的时间记录下来。\n\n---\n\n### 通过尝试 H5 项目，巩固 Web 基础知识\n\n在拿到第一份工作的时候，我感到开心的同时，又深感忐忑。毕竟一份新的工作带来的是一份新的项目，虽然我对当前所学知识的掌握，是有一定的信心。我比较担心的是我的开发进度是否可以跟得上，如果遇到我暂时还未掌握的知识盲区我该怎样应对呢？我带着这样的心态开发了我的第一个 H5 项目。\n\n具体的详细情况，这里就不在详细记录了，总归结果是，花了一周的时间开发了一个微信小程序，尽管当时功能并不完全，但是在计划之内。而且在我看来当时时间绝对谈不上是充分。我很意外在这样的要求下，我竟然没有一丝的紧张，每天有条不紊的，开发一个又一个页面。此时我非常非常的庆幸，我在过去几个月里并不只是单纯的学习理论知识，我在 GitHub 开源项目中，和帮助津津乐道团队开发一些小功能的经历给我带来了我自己都意想不到的收获。我几乎不需要负责人告诉我一个页面需要怎么去设计，就可以完成一个又一个开发任务。我不觉得我做的很完美，但是我一定没有拖后腿。这是我在开源社区学习以来，另一件让我深感开心的一件事。更加坚定了我，想花更多的一些时间投入到开源社区中去。\n\n开发 H5 项目，我学到的更多的是巩固我已经掌握的知识，并加以灵活运用它们。不需要考虑他们在电脑端的布局，让我写起来更加的得心应手，放飞自我～唯一有一些遗憾的是可能当时项目时间比较紧张一些，我未能接受更多前后端搭配的工作，可能是因为接口已经写好，上面又着急要，我只是简单写了写类型之类的。不过开发期间我我比较开心的是，我学到了 Ant Design 组件的定制化。之前用 Ant Design 组件库的时候发现自己写的 CSS 文件不能应用到组件，查看文档也一直没有去深究。\n\n- Ant Design 定制\n\n```\n<!-- 之前导入 CSS 文件的方式 -->\nimport styles from './index.less';\n\n<div className={styles.XXX}></div>\n\n\n<!-- 定制化 Ant Design 时用的 CSS 导入方式 -->\nimport './index.less';\n\n<!-- CSS 文件使用 Class 选择器的方式即可-->\n.am-action-sheet {}\n```\n\n注意，同时导入两份文件时，名字不可重复！当然了，如果全局使用的话，直接在全局 CSS 文件书写即可。\n\n### B 端项目-表单\n\n表单是我一直没有深入了解的知识区，刚开始学习 Web 项目时，对这部分是既好奇，又困惑，为什么用户提交的数据可以存起来，存到哪里去了呢？前端页面中表单提交之后，数据是怎样发送给后端的呢？在我心中早就困惑了很久的问题终于在这次开发过程中，让我如愿以偿的掌握了它。我着手开发了一个具有三个步骤的大开户表单，发送给后端接口的数据也都是需要经过处理的，嗯，没错，尽管在一些资深大佬面前，这根本不算什么，但是对当前的我来说，拿来练手再好不过了。着手就开始干！\n\n首先需要确定的是该页面工程化设计，没错，绝对得清晰可读。\n\n![](/static/images/blog/6-28.1.png)\n\n表单的排版布局没什么可说的，这里记录下整个过程中，我学到的新的技能。\n\n- 整个表单写完之后，我开始调整数据，这里让我长了个记性，开发过程中，一定要确认，了解清楚后端需要的数据格式。\n\n我发送的数据：\n```\n{\n  A: '',\n  B: '',\n  C: '',\n  ...\n}\n```\n\n接口需要的数据类型：\n```\n{\n  A: '',\n  B: '',\n  C: {\n    C-1: '',\n    C-2: '',\n  }\n  D: {\n    D-1: '',\n    D-2: '',\n  }\n  ...\n}\n```\n\n好在这里让我熟练掌握了结构赋值和对象的新增属性。自己亲自动手尝试之后才是真的学到了。\n\n- 数据格式的处理\n\n```\nconst data = form2.getFieldsValue(true);\nconst { legal_validity_begin_time, legal_validity_end_time, agency_validity_begin_time, agency_validity_end_time, ...newData } = data\nnewFormData.person_info = newData;\n```\n\n- 数据类型的处理（字符串拼接，时间戳转换等）\n\n```\nnewData.legal_validity_begin = parseInt(new Date(legal_validity_begin_time).getTime().toString().slice(0, 10));\nnewFormData.bus_addr = `${bus_addr_City}${bus_addr_Province}${bus_addr_detail}`;\n```\n\n- 提交前数据的校验\n\n```\n<!-- 用到了 Ant Design 表单的 API -->\nform3.validateFields().then(() => {\n  <!-- 检验数据之后，整理数据格式然后向后端发送数据 -->\n})\n```\n\n- 数据的本地存储\n\n```\nwindow.localStorage.setItem('formData', JSON.stringify(data));\n```\n\n### 小节\n\n开发过程中发现，React 使用三元判断法选择性的渲染 Dom 节点时，每次状态更新，旧的 Dom 是被直接干掉了，并不会保留，与 Vue 的渲染方式不同，所以在表单进行动态渲染时，Dom 节点信息更新时，旧 Dom 的状态会丢失。场景如：在用户选择上传身份证正反面图片，还是选择上传复印件的场景中，上传过图片之后来回切换选择时。\n\n![](/static/images/blog/6-28.2.png)\n\n![](/static/images/blog/6-28.3.png)\n\n### 总结\n\n开发完成后，看到数据成功的发送到后端，心里还是很激动的。尽管之后测试时，遇到了一小部分的 BUG ，修复这些 BUG 的同时，又加深了我对 React 和 Ant Design 的掌握。因为太久没更新博客，导致想写的东西太多啦，今天就先把这两部分的内容记录下来～\n\n前不久刚把博客页搭起来，这下总算有了经常更新优化内容的动力～（哥们说不好看，看来得再找时间调研调研，再更新更新喽）我知道我还需要学习很多很多的知识，因为比大部分人都学的晚，所以只能更加细心，有计划的来学习。到今天我才对时间的安排有了非常深刻的认识。我也很庆幸，我还有时间，有精力来学习它。怎么说呢，趁年轻，好好努力把！\n","source":"_posts/2021-6-28.md","raw":"---\ntitle: 对 Ant Design 定制和使用表单的总结\ndate: 2021-06-28\n---\n\n## 对 Ant Design 定制和使用表单的总结\n\n2021-6-28\n\n从今年的 4 月份开始拥有了我踏入 Web 行业以来第一份正式工作，到现在已经过去三个月之久了。这三个月我不仅仅把它当成一份单纯的工作，因为知道自己技术尚浅，只能疯狂的吸收那些自己从来没听过的技术名词，一边慢慢摸索着，一边巩固着自己已经掌握的知识，今天就把近三个月来比较做的较为深刻的时间记录下来。\n\n---\n\n### 通过尝试 H5 项目，巩固 Web 基础知识\n\n在拿到第一份工作的时候，我感到开心的同时，又深感忐忑。毕竟一份新的工作带来的是一份新的项目，虽然我对当前所学知识的掌握，是有一定的信心。我比较担心的是我的开发进度是否可以跟得上，如果遇到我暂时还未掌握的知识盲区我该怎样应对呢？我带着这样的心态开发了我的第一个 H5 项目。\n\n具体的详细情况，这里就不在详细记录了，总归结果是，花了一周的时间开发了一个微信小程序，尽管当时功能并不完全，但是在计划之内。而且在我看来当时时间绝对谈不上是充分。我很意外在这样的要求下，我竟然没有一丝的紧张，每天有条不紊的，开发一个又一个页面。此时我非常非常的庆幸，我在过去几个月里并不只是单纯的学习理论知识，我在 GitHub 开源项目中，和帮助津津乐道团队开发一些小功能的经历给我带来了我自己都意想不到的收获。我几乎不需要负责人告诉我一个页面需要怎么去设计，就可以完成一个又一个开发任务。我不觉得我做的很完美，但是我一定没有拖后腿。这是我在开源社区学习以来，另一件让我深感开心的一件事。更加坚定了我，想花更多的一些时间投入到开源社区中去。\n\n开发 H5 项目，我学到的更多的是巩固我已经掌握的知识，并加以灵活运用它们。不需要考虑他们在电脑端的布局，让我写起来更加的得心应手，放飞自我～唯一有一些遗憾的是可能当时项目时间比较紧张一些，我未能接受更多前后端搭配的工作，可能是因为接口已经写好，上面又着急要，我只是简单写了写类型之类的。不过开发期间我我比较开心的是，我学到了 Ant Design 组件的定制化。之前用 Ant Design 组件库的时候发现自己写的 CSS 文件不能应用到组件，查看文档也一直没有去深究。\n\n- Ant Design 定制\n\n```\n<!-- 之前导入 CSS 文件的方式 -->\nimport styles from './index.less';\n\n<div className={styles.XXX}></div>\n\n\n<!-- 定制化 Ant Design 时用的 CSS 导入方式 -->\nimport './index.less';\n\n<!-- CSS 文件使用 Class 选择器的方式即可-->\n.am-action-sheet {}\n```\n\n注意，同时导入两份文件时，名字不可重复！当然了，如果全局使用的话，直接在全局 CSS 文件书写即可。\n\n### B 端项目-表单\n\n表单是我一直没有深入了解的知识区，刚开始学习 Web 项目时，对这部分是既好奇，又困惑，为什么用户提交的数据可以存起来，存到哪里去了呢？前端页面中表单提交之后，数据是怎样发送给后端的呢？在我心中早就困惑了很久的问题终于在这次开发过程中，让我如愿以偿的掌握了它。我着手开发了一个具有三个步骤的大开户表单，发送给后端接口的数据也都是需要经过处理的，嗯，没错，尽管在一些资深大佬面前，这根本不算什么，但是对当前的我来说，拿来练手再好不过了。着手就开始干！\n\n首先需要确定的是该页面工程化设计，没错，绝对得清晰可读。\n\n![](/static/images/blog/6-28.1.png)\n\n表单的排版布局没什么可说的，这里记录下整个过程中，我学到的新的技能。\n\n- 整个表单写完之后，我开始调整数据，这里让我长了个记性，开发过程中，一定要确认，了解清楚后端需要的数据格式。\n\n我发送的数据：\n```\n{\n  A: '',\n  B: '',\n  C: '',\n  ...\n}\n```\n\n接口需要的数据类型：\n```\n{\n  A: '',\n  B: '',\n  C: {\n    C-1: '',\n    C-2: '',\n  }\n  D: {\n    D-1: '',\n    D-2: '',\n  }\n  ...\n}\n```\n\n好在这里让我熟练掌握了结构赋值和对象的新增属性。自己亲自动手尝试之后才是真的学到了。\n\n- 数据格式的处理\n\n```\nconst data = form2.getFieldsValue(true);\nconst { legal_validity_begin_time, legal_validity_end_time, agency_validity_begin_time, agency_validity_end_time, ...newData } = data\nnewFormData.person_info = newData;\n```\n\n- 数据类型的处理（字符串拼接，时间戳转换等）\n\n```\nnewData.legal_validity_begin = parseInt(new Date(legal_validity_begin_time).getTime().toString().slice(0, 10));\nnewFormData.bus_addr = `${bus_addr_City}${bus_addr_Province}${bus_addr_detail}`;\n```\n\n- 提交前数据的校验\n\n```\n<!-- 用到了 Ant Design 表单的 API -->\nform3.validateFields().then(() => {\n  <!-- 检验数据之后，整理数据格式然后向后端发送数据 -->\n})\n```\n\n- 数据的本地存储\n\n```\nwindow.localStorage.setItem('formData', JSON.stringify(data));\n```\n\n### 小节\n\n开发过程中发现，React 使用三元判断法选择性的渲染 Dom 节点时，每次状态更新，旧的 Dom 是被直接干掉了，并不会保留，与 Vue 的渲染方式不同，所以在表单进行动态渲染时，Dom 节点信息更新时，旧 Dom 的状态会丢失。场景如：在用户选择上传身份证正反面图片，还是选择上传复印件的场景中，上传过图片之后来回切换选择时。\n\n![](/static/images/blog/6-28.2.png)\n\n![](/static/images/blog/6-28.3.png)\n\n### 总结\n\n开发完成后，看到数据成功的发送到后端，心里还是很激动的。尽管之后测试时，遇到了一小部分的 BUG ，修复这些 BUG 的同时，又加深了我对 React 和 Ant Design 的掌握。因为太久没更新博客，导致想写的东西太多啦，今天就先把这两部分的内容记录下来～\n\n前不久刚把博客页搭起来，这下总算有了经常更新优化内容的动力～（哥们说不好看，看来得再找时间调研调研，再更新更新喽）我知道我还需要学习很多很多的知识，因为比大部分人都学的晚，所以只能更加细心，有计划的来学习。到今天我才对时间的安排有了非常深刻的认识。我也很庆幸，我还有时间，有精力来学习它。怎么说呢，趁年轻，好好努力把！\n","slug":"2021-6-28","published":1,"updated":"2022-01-07T05:39:30.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky403nf30004crul9f9l4p3b","content":"<h2 id=\"对-Ant-Design-定制和使用表单的总结\"><a href=\"#对-Ant-Design-定制和使用表单的总结\" class=\"headerlink\" title=\"对 Ant Design 定制和使用表单的总结\"></a>对 Ant Design 定制和使用表单的总结</h2><p>2021-6-28</p>\n<p>从今年的 4 月份开始拥有了我踏入 Web 行业以来第一份正式工作，到现在已经过去三个月之久了。这三个月我不仅仅把它当成一份单纯的工作，因为知道自己技术尚浅，只能疯狂的吸收那些自己从来没听过的技术名词，一边慢慢摸索着，一边巩固着自己已经掌握的知识，今天就把近三个月来比较做的较为深刻的时间记录下来。</p>\n<hr>\n<h3 id=\"通过尝试-H5-项目，巩固-Web-基础知识\"><a href=\"#通过尝试-H5-项目，巩固-Web-基础知识\" class=\"headerlink\" title=\"通过尝试 H5 项目，巩固 Web 基础知识\"></a>通过尝试 H5 项目，巩固 Web 基础知识</h3><p>在拿到第一份工作的时候，我感到开心的同时，又深感忐忑。毕竟一份新的工作带来的是一份新的项目，虽然我对当前所学知识的掌握，是有一定的信心。我比较担心的是我的开发进度是否可以跟得上，如果遇到我暂时还未掌握的知识盲区我该怎样应对呢？我带着这样的心态开发了我的第一个 H5 项目。</p>\n<p>具体的详细情况，这里就不在详细记录了，总归结果是，花了一周的时间开发了一个微信小程序，尽管当时功能并不完全，但是在计划之内。而且在我看来当时时间绝对谈不上是充分。我很意外在这样的要求下，我竟然没有一丝的紧张，每天有条不紊的，开发一个又一个页面。此时我非常非常的庆幸，我在过去几个月里并不只是单纯的学习理论知识，我在 GitHub 开源项目中，和帮助津津乐道团队开发一些小功能的经历给我带来了我自己都意想不到的收获。我几乎不需要负责人告诉我一个页面需要怎么去设计，就可以完成一个又一个开发任务。我不觉得我做的很完美，但是我一定没有拖后腿。这是我在开源社区学习以来，另一件让我深感开心的一件事。更加坚定了我，想花更多的一些时间投入到开源社区中去。</p>\n<p>开发 H5 项目，我学到的更多的是巩固我已经掌握的知识，并加以灵活运用它们。不需要考虑他们在电脑端的布局，让我写起来更加的得心应手，放飞自我～唯一有一些遗憾的是可能当时项目时间比较紧张一些，我未能接受更多前后端搭配的工作，可能是因为接口已经写好，上面又着急要，我只是简单写了写类型之类的。不过开发期间我我比较开心的是，我学到了 Ant Design 组件的定制化。之前用 Ant Design 组件库的时候发现自己写的 CSS 文件不能应用到组件，查看文档也一直没有去深究。</p>\n<ul>\n<li>Ant Design 定制</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 之前导入 CSS 文件的方式 --&gt;</span><br><span class=\"line\">import styles from &#x27;./index.less&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div className=&#123;styles.XXX&#125;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 定制化 Ant Design 时用的 CSS 导入方式 --&gt;</span><br><span class=\"line\">import &#x27;./index.less&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- CSS 文件使用 Class 选择器的方式即可--&gt;</span><br><span class=\"line\">.am-action-sheet &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，同时导入两份文件时，名字不可重复！当然了，如果全局使用的话，直接在全局 CSS 文件书写即可。</p>\n<h3 id=\"B-端项目-表单\"><a href=\"#B-端项目-表单\" class=\"headerlink\" title=\"B 端项目-表单\"></a>B 端项目-表单</h3><p>表单是我一直没有深入了解的知识区，刚开始学习 Web 项目时，对这部分是既好奇，又困惑，为什么用户提交的数据可以存起来，存到哪里去了呢？前端页面中表单提交之后，数据是怎样发送给后端的呢？在我心中早就困惑了很久的问题终于在这次开发过程中，让我如愿以偿的掌握了它。我着手开发了一个具有三个步骤的大开户表单，发送给后端接口的数据也都是需要经过处理的，嗯，没错，尽管在一些资深大佬面前，这根本不算什么，但是对当前的我来说，拿来练手再好不过了。着手就开始干！</p>\n<p>首先需要确定的是该页面工程化设计，没错，绝对得清晰可读。</p>\n<p><img src=\"/static/images/blog/6-28.1.png\"></p>\n<p>表单的排版布局没什么可说的，这里记录下整个过程中，我学到的新的技能。</p>\n<ul>\n<li>整个表单写完之后，我开始调整数据，这里让我长了个记性，开发过程中，一定要确认，了解清楚后端需要的数据格式。</li>\n</ul>\n<p>我发送的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  A: &#x27;&#x27;,</span><br><span class=\"line\">  B: &#x27;&#x27;,</span><br><span class=\"line\">  C: &#x27;&#x27;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口需要的数据类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  A: &#x27;&#x27;,</span><br><span class=\"line\">  B: &#x27;&#x27;,</span><br><span class=\"line\">  C: &#123;</span><br><span class=\"line\">    C-1: &#x27;&#x27;,</span><br><span class=\"line\">    C-2: &#x27;&#x27;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  D: &#123;</span><br><span class=\"line\">    D-1: &#x27;&#x27;,</span><br><span class=\"line\">    D-2: &#x27;&#x27;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好在这里让我熟练掌握了结构赋值和对象的新增属性。自己亲自动手尝试之后才是真的学到了。</p>\n<ul>\n<li>数据格式的处理</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const data = form2.getFieldsValue(true);</span><br><span class=\"line\">const &#123; legal_validity_begin_time, legal_validity_end_time, agency_validity_begin_time, agency_validity_end_time, ...newData &#125; = data</span><br><span class=\"line\">newFormData.person_info = newData;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数据类型的处理（字符串拼接，时间戳转换等）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newData.legal_validity_begin = parseInt(new Date(legal_validity_begin_time).getTime().toString().slice(0, 10));</span><br><span class=\"line\">newFormData.bus_addr = `$&#123;bus_addr_City&#125;$&#123;bus_addr_Province&#125;$&#123;bus_addr_detail&#125;`;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交前数据的校验</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 用到了 Ant Design 表单的 API --&gt;</span><br><span class=\"line\">form3.validateFields().then(() =&gt; &#123;</span><br><span class=\"line\">  &lt;!-- 检验数据之后，整理数据格式然后向后端发送数据 --&gt;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数据的本地存储</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.setItem(&#x27;formData&#x27;, JSON.stringify(data));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>开发过程中发现，React 使用三元判断法选择性的渲染 Dom 节点时，每次状态更新，旧的 Dom 是被直接干掉了，并不会保留，与 Vue 的渲染方式不同，所以在表单进行动态渲染时，Dom 节点信息更新时，旧 Dom 的状态会丢失。场景如：在用户选择上传身份证正反面图片，还是选择上传复印件的场景中，上传过图片之后来回切换选择时。</p>\n<p><img src=\"/static/images/blog/6-28.2.png\"></p>\n<p><img src=\"/static/images/blog/6-28.3.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>开发完成后，看到数据成功的发送到后端，心里还是很激动的。尽管之后测试时，遇到了一小部分的 BUG ，修复这些 BUG 的同时，又加深了我对 React 和 Ant Design 的掌握。因为太久没更新博客，导致想写的东西太多啦，今天就先把这两部分的内容记录下来～</p>\n<p>前不久刚把博客页搭起来，这下总算有了经常更新优化内容的动力～（哥们说不好看，看来得再找时间调研调研，再更新更新喽）我知道我还需要学习很多很多的知识，因为比大部分人都学的晚，所以只能更加细心，有计划的来学习。到今天我才对时间的安排有了非常深刻的认识。我也很庆幸，我还有时间，有精力来学习它。怎么说呢，趁年轻，好好努力把！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"对-Ant-Design-定制和使用表单的总结\"><a href=\"#对-Ant-Design-定制和使用表单的总结\" class=\"headerlink\" title=\"对 Ant Design 定制和使用表单的总结\"></a>对 Ant Design 定制和使用表单的总结</h2><p>2021-6-28</p>\n<p>从今年的 4 月份开始拥有了我踏入 Web 行业以来第一份正式工作，到现在已经过去三个月之久了。这三个月我不仅仅把它当成一份单纯的工作，因为知道自己技术尚浅，只能疯狂的吸收那些自己从来没听过的技术名词，一边慢慢摸索着，一边巩固着自己已经掌握的知识，今天就把近三个月来比较做的较为深刻的时间记录下来。</p>\n<hr>\n<h3 id=\"通过尝试-H5-项目，巩固-Web-基础知识\"><a href=\"#通过尝试-H5-项目，巩固-Web-基础知识\" class=\"headerlink\" title=\"通过尝试 H5 项目，巩固 Web 基础知识\"></a>通过尝试 H5 项目，巩固 Web 基础知识</h3><p>在拿到第一份工作的时候，我感到开心的同时，又深感忐忑。毕竟一份新的工作带来的是一份新的项目，虽然我对当前所学知识的掌握，是有一定的信心。我比较担心的是我的开发进度是否可以跟得上，如果遇到我暂时还未掌握的知识盲区我该怎样应对呢？我带着这样的心态开发了我的第一个 H5 项目。</p>\n<p>具体的详细情况，这里就不在详细记录了，总归结果是，花了一周的时间开发了一个微信小程序，尽管当时功能并不完全，但是在计划之内。而且在我看来当时时间绝对谈不上是充分。我很意外在这样的要求下，我竟然没有一丝的紧张，每天有条不紊的，开发一个又一个页面。此时我非常非常的庆幸，我在过去几个月里并不只是单纯的学习理论知识，我在 GitHub 开源项目中，和帮助津津乐道团队开发一些小功能的经历给我带来了我自己都意想不到的收获。我几乎不需要负责人告诉我一个页面需要怎么去设计，就可以完成一个又一个开发任务。我不觉得我做的很完美，但是我一定没有拖后腿。这是我在开源社区学习以来，另一件让我深感开心的一件事。更加坚定了我，想花更多的一些时间投入到开源社区中去。</p>\n<p>开发 H5 项目，我学到的更多的是巩固我已经掌握的知识，并加以灵活运用它们。不需要考虑他们在电脑端的布局，让我写起来更加的得心应手，放飞自我～唯一有一些遗憾的是可能当时项目时间比较紧张一些，我未能接受更多前后端搭配的工作，可能是因为接口已经写好，上面又着急要，我只是简单写了写类型之类的。不过开发期间我我比较开心的是，我学到了 Ant Design 组件的定制化。之前用 Ant Design 组件库的时候发现自己写的 CSS 文件不能应用到组件，查看文档也一直没有去深究。</p>\n<ul>\n<li>Ant Design 定制</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 之前导入 CSS 文件的方式 --&gt;</span><br><span class=\"line\">import styles from &#x27;./index.less&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div className=&#123;styles.XXX&#125;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 定制化 Ant Design 时用的 CSS 导入方式 --&gt;</span><br><span class=\"line\">import &#x27;./index.less&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- CSS 文件使用 Class 选择器的方式即可--&gt;</span><br><span class=\"line\">.am-action-sheet &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，同时导入两份文件时，名字不可重复！当然了，如果全局使用的话，直接在全局 CSS 文件书写即可。</p>\n<h3 id=\"B-端项目-表单\"><a href=\"#B-端项目-表单\" class=\"headerlink\" title=\"B 端项目-表单\"></a>B 端项目-表单</h3><p>表单是我一直没有深入了解的知识区，刚开始学习 Web 项目时，对这部分是既好奇，又困惑，为什么用户提交的数据可以存起来，存到哪里去了呢？前端页面中表单提交之后，数据是怎样发送给后端的呢？在我心中早就困惑了很久的问题终于在这次开发过程中，让我如愿以偿的掌握了它。我着手开发了一个具有三个步骤的大开户表单，发送给后端接口的数据也都是需要经过处理的，嗯，没错，尽管在一些资深大佬面前，这根本不算什么，但是对当前的我来说，拿来练手再好不过了。着手就开始干！</p>\n<p>首先需要确定的是该页面工程化设计，没错，绝对得清晰可读。</p>\n<p><img src=\"/static/images/blog/6-28.1.png\"></p>\n<p>表单的排版布局没什么可说的，这里记录下整个过程中，我学到的新的技能。</p>\n<ul>\n<li>整个表单写完之后，我开始调整数据，这里让我长了个记性，开发过程中，一定要确认，了解清楚后端需要的数据格式。</li>\n</ul>\n<p>我发送的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  A: &#x27;&#x27;,</span><br><span class=\"line\">  B: &#x27;&#x27;,</span><br><span class=\"line\">  C: &#x27;&#x27;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口需要的数据类型：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  A: &#x27;&#x27;,</span><br><span class=\"line\">  B: &#x27;&#x27;,</span><br><span class=\"line\">  C: &#123;</span><br><span class=\"line\">    C-1: &#x27;&#x27;,</span><br><span class=\"line\">    C-2: &#x27;&#x27;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  D: &#123;</span><br><span class=\"line\">    D-1: &#x27;&#x27;,</span><br><span class=\"line\">    D-2: &#x27;&#x27;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好在这里让我熟练掌握了结构赋值和对象的新增属性。自己亲自动手尝试之后才是真的学到了。</p>\n<ul>\n<li>数据格式的处理</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const data = form2.getFieldsValue(true);</span><br><span class=\"line\">const &#123; legal_validity_begin_time, legal_validity_end_time, agency_validity_begin_time, agency_validity_end_time, ...newData &#125; = data</span><br><span class=\"line\">newFormData.person_info = newData;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数据类型的处理（字符串拼接，时间戳转换等）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">newData.legal_validity_begin = parseInt(new Date(legal_validity_begin_time).getTime().toString().slice(0, 10));</span><br><span class=\"line\">newFormData.bus_addr = `$&#123;bus_addr_City&#125;$&#123;bus_addr_Province&#125;$&#123;bus_addr_detail&#125;`;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交前数据的校验</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 用到了 Ant Design 表单的 API --&gt;</span><br><span class=\"line\">form3.validateFields().then(() =&gt; &#123;</span><br><span class=\"line\">  &lt;!-- 检验数据之后，整理数据格式然后向后端发送数据 --&gt;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数据的本地存储</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.localStorage.setItem(&#x27;formData&#x27;, JSON.stringify(data));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>开发过程中发现，React 使用三元判断法选择性的渲染 Dom 节点时，每次状态更新，旧的 Dom 是被直接干掉了，并不会保留，与 Vue 的渲染方式不同，所以在表单进行动态渲染时，Dom 节点信息更新时，旧 Dom 的状态会丢失。场景如：在用户选择上传身份证正反面图片，还是选择上传复印件的场景中，上传过图片之后来回切换选择时。</p>\n<p><img src=\"/static/images/blog/6-28.2.png\"></p>\n<p><img src=\"/static/images/blog/6-28.3.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>开发完成后，看到数据成功的发送到后端，心里还是很激动的。尽管之后测试时，遇到了一小部分的 BUG ，修复这些 BUG 的同时，又加深了我对 React 和 Ant Design 的掌握。因为太久没更新博客，导致想写的东西太多啦，今天就先把这两部分的内容记录下来～</p>\n<p>前不久刚把博客页搭起来，这下总算有了经常更新优化内容的动力～（哥们说不好看，看来得再找时间调研调研，再更新更新喽）我知道我还需要学习很多很多的知识，因为比大部分人都学的晚，所以只能更加细心，有计划的来学习。到今天我才对时间的安排有了非常深刻的认识。我也很庆幸，我还有时间，有精力来学习它。怎么说呢，趁年轻，好好努力把！</p>\n"},{"title":"关于删除前端测试中的 wait 的一些分享","date":"2021-01-29T16:00:00.000Z","_content":"\n## 关于删除前端测试中的 wait 的一些分享\n\n2021-1-30\n\n最近学习了如何用 cypress 写前端的测试，在写测试的过程中，发现了一个经常可以见到的 `wait` 方法，起初我也不以为然，甚至对它产生了友好的感觉，一旦 CI 报错我就会尝试用 wait 来解决它，尽管实用，它也并不会影响测试的正常运行，但是在小伙伴告诉我，它不应该被这样用的时候，我重新去阅读了官方文档，官方文档写的很清楚，我们几乎不需要等待任何的时间在我们的测试中。并给出了一些规范的例子，然后我就开始将我测试中的`wait` 一个一个去除掉。在这里我分享一下我在删除那些测试中的 `wait` 时遇到的一些问题和技巧。\n\n--------\n\n我发现在一些测试中用了许多 `wait`，但其实这些 `wait` 并没有起到一点作用，（：直接删除掉就好了，并且不影响 CI 检查），我将列出一些列子与方法来讲解它们：\n\n1. 那些通常出现在 `click` 之后的 `wait`。并不是每个点击之后都需要暂停一下的，通常，只有在点击按钮后需要解析部分资源，以及点击按钮后产生的新元素等可能需要用 `timeout` 来短暂的等待它们出现。同样也可以使用 `should` 来进行判断。像点击下一页，点击创建，点击提交这些点击并不需要等待，但是点击编辑，点击按钮产生的新元素时，就会需要用 `timeout` 或者 `should` 来使测试在 CI 中更稳定一些。在 cypress 中，很多方法都支持 `timeout` ，当我们想延迟点击按钮时，我们可以为 `click` 加上 `timeout` 属性，来延迟点击它，当我们希望在点击后等待时，我们可以在点击后出现的元素中使用加上 `get` + `should` 的方法来确保它们出现后再往后进行，当然 `get` 同样支持 `timeout` 属性。\n\n注意：当 `click` 具有 `force` 属性时，`timeout` 将失效。\n\n2. 那些用来等待解析资源的 `wait`。我发现在写编辑测试的时候，点击编辑按钮后，我们可以使用 `should` 判断一些元素是否正常出现，而不用使用 `wait` 来等待。同样对于等待 URL 解析的 `wait` 我们可以用 `intercept` 和 `wait` 搭配来等待域名的解析，像这样：\n\n```\n  it('should set a accessible URL', function () {\n    cy.visit('/');\n    cy.get(selector.avatar).invoke('show').click('center');\n    cy.contains('Settings').click();\n    cy.url().should('contains', '/settings');\n    cy.get(selector.grafanaURL).clear().type(data.validURL);\n    cy.contains('Submit').click();\n\n    cy.get(selector.notificationMessage).should('contain', data.updateSuccessfully);\n    cy.intercept(data.validURL).as(data.fetchURL);\n    cy.wait(data.fetch);\n    cy.get(selector.pageContainer).children().should('contain', 'Dashboard');\n  });\n```\n\n这里分享一个小技巧，我们可以使用在点击某个跳转之后，使用 `get` 获取任一元素，然后加一个 `click` 然后用 `should` 来判断它是否出现，就可以确保正确的访问到最新的 dom 元素，至于为什么用 `click` 是因为在对 dom 进行操作时，因为 Cypress 运行的速度非常快，如果只是寻找某个节点的信息，它不一定找到的是最新的 dom 节点，如果对旧 dom 进一步进行操作那就不对了。所以当找到的 dom 元素不是最新的时候，我们点击它之后，再用 `should` 方法来进行判断它是否是我们寻找的元素。\n\n```\n  it('should edit route with cors form no allow_origins_by_regex configured', function () {\n    cy.visit('/');\n    cy.contains('Route').click();\n    cy.get(selector.name).clear().type('routeName');\n    cy.contains('Search').click();\n    cy.contains('routeName').siblings().contains('Configure').click();\n    cy.get(selector.name).should('have.value','routeName');\n    cy.contains('Next').click();\n    cy.contains('Next').click();\n\n    // config cors plugin\n    cy.contains('cors').parents(selector.pluginCardBordered).within(() => {\n      cy.get('button').click({\n        force: true\n      });\n    });\n```\n\n3. 路由跳转后的 `wait`。通常首次点击进入到某个页面后是不需要等待的，但是我在删除部分 `wait` 的时候，偶尔会遇到 CI 报错的情况，这种时候我会用三种方法来处理：\n\n+ 通常页面中会有一个刷新的按钮，点击它使页面刷新。\n+ 在 `click` 之后使用 `reload`，使页面重新加载。\n+ 使用 `get` 获取元素，用 `should` 判断它正常出现。\n\n最后，以上便是我在删除 `wait` 时的分享，如果有我理解不对的地方，欢迎大家为我提出建议，感谢大家。\n","source":"_posts/2021-1-30.md","raw":"---\ntitle: 关于删除前端测试中的 wait 的一些分享\ndate: 2021-01-30\n---\n\n## 关于删除前端测试中的 wait 的一些分享\n\n2021-1-30\n\n最近学习了如何用 cypress 写前端的测试，在写测试的过程中，发现了一个经常可以见到的 `wait` 方法，起初我也不以为然，甚至对它产生了友好的感觉，一旦 CI 报错我就会尝试用 wait 来解决它，尽管实用，它也并不会影响测试的正常运行，但是在小伙伴告诉我，它不应该被这样用的时候，我重新去阅读了官方文档，官方文档写的很清楚，我们几乎不需要等待任何的时间在我们的测试中。并给出了一些规范的例子，然后我就开始将我测试中的`wait` 一个一个去除掉。在这里我分享一下我在删除那些测试中的 `wait` 时遇到的一些问题和技巧。\n\n--------\n\n我发现在一些测试中用了许多 `wait`，但其实这些 `wait` 并没有起到一点作用，（：直接删除掉就好了，并且不影响 CI 检查），我将列出一些列子与方法来讲解它们：\n\n1. 那些通常出现在 `click` 之后的 `wait`。并不是每个点击之后都需要暂停一下的，通常，只有在点击按钮后需要解析部分资源，以及点击按钮后产生的新元素等可能需要用 `timeout` 来短暂的等待它们出现。同样也可以使用 `should` 来进行判断。像点击下一页，点击创建，点击提交这些点击并不需要等待，但是点击编辑，点击按钮产生的新元素时，就会需要用 `timeout` 或者 `should` 来使测试在 CI 中更稳定一些。在 cypress 中，很多方法都支持 `timeout` ，当我们想延迟点击按钮时，我们可以为 `click` 加上 `timeout` 属性，来延迟点击它，当我们希望在点击后等待时，我们可以在点击后出现的元素中使用加上 `get` + `should` 的方法来确保它们出现后再往后进行，当然 `get` 同样支持 `timeout` 属性。\n\n注意：当 `click` 具有 `force` 属性时，`timeout` 将失效。\n\n2. 那些用来等待解析资源的 `wait`。我发现在写编辑测试的时候，点击编辑按钮后，我们可以使用 `should` 判断一些元素是否正常出现，而不用使用 `wait` 来等待。同样对于等待 URL 解析的 `wait` 我们可以用 `intercept` 和 `wait` 搭配来等待域名的解析，像这样：\n\n```\n  it('should set a accessible URL', function () {\n    cy.visit('/');\n    cy.get(selector.avatar).invoke('show').click('center');\n    cy.contains('Settings').click();\n    cy.url().should('contains', '/settings');\n    cy.get(selector.grafanaURL).clear().type(data.validURL);\n    cy.contains('Submit').click();\n\n    cy.get(selector.notificationMessage).should('contain', data.updateSuccessfully);\n    cy.intercept(data.validURL).as(data.fetchURL);\n    cy.wait(data.fetch);\n    cy.get(selector.pageContainer).children().should('contain', 'Dashboard');\n  });\n```\n\n这里分享一个小技巧，我们可以使用在点击某个跳转之后，使用 `get` 获取任一元素，然后加一个 `click` 然后用 `should` 来判断它是否出现，就可以确保正确的访问到最新的 dom 元素，至于为什么用 `click` 是因为在对 dom 进行操作时，因为 Cypress 运行的速度非常快，如果只是寻找某个节点的信息，它不一定找到的是最新的 dom 节点，如果对旧 dom 进一步进行操作那就不对了。所以当找到的 dom 元素不是最新的时候，我们点击它之后，再用 `should` 方法来进行判断它是否是我们寻找的元素。\n\n```\n  it('should edit route with cors form no allow_origins_by_regex configured', function () {\n    cy.visit('/');\n    cy.contains('Route').click();\n    cy.get(selector.name).clear().type('routeName');\n    cy.contains('Search').click();\n    cy.contains('routeName').siblings().contains('Configure').click();\n    cy.get(selector.name).should('have.value','routeName');\n    cy.contains('Next').click();\n    cy.contains('Next').click();\n\n    // config cors plugin\n    cy.contains('cors').parents(selector.pluginCardBordered).within(() => {\n      cy.get('button').click({\n        force: true\n      });\n    });\n```\n\n3. 路由跳转后的 `wait`。通常首次点击进入到某个页面后是不需要等待的，但是我在删除部分 `wait` 的时候，偶尔会遇到 CI 报错的情况，这种时候我会用三种方法来处理：\n\n+ 通常页面中会有一个刷新的按钮，点击它使页面刷新。\n+ 在 `click` 之后使用 `reload`，使页面重新加载。\n+ 使用 `get` 获取元素，用 `should` 判断它正常出现。\n\n最后，以上便是我在删除 `wait` 时的分享，如果有我理解不对的地方，欢迎大家为我提出建议，感谢大家。\n","slug":"2021-1-30","published":1,"updated":"2022-01-07T05:39:06.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky403nf30005crulgnak61xw","content":"<h2 id=\"关于删除前端测试中的-wait-的一些分享\"><a href=\"#关于删除前端测试中的-wait-的一些分享\" class=\"headerlink\" title=\"关于删除前端测试中的 wait 的一些分享\"></a>关于删除前端测试中的 wait 的一些分享</h2><p>2021-1-30</p>\n<p>最近学习了如何用 cypress 写前端的测试，在写测试的过程中，发现了一个经常可以见到的 <code>wait</code> 方法，起初我也不以为然，甚至对它产生了友好的感觉，一旦 CI 报错我就会尝试用 wait 来解决它，尽管实用，它也并不会影响测试的正常运行，但是在小伙伴告诉我，它不应该被这样用的时候，我重新去阅读了官方文档，官方文档写的很清楚，我们几乎不需要等待任何的时间在我们的测试中。并给出了一些规范的例子，然后我就开始将我测试中的<code>wait</code> 一个一个去除掉。在这里我分享一下我在删除那些测试中的 <code>wait</code> 时遇到的一些问题和技巧。</p>\n<hr>\n<p>我发现在一些测试中用了许多 <code>wait</code>，但其实这些 <code>wait</code> 并没有起到一点作用，（：直接删除掉就好了，并且不影响 CI 检查），我将列出一些列子与方法来讲解它们：</p>\n<ol>\n<li>那些通常出现在 <code>click</code> 之后的 <code>wait</code>。并不是每个点击之后都需要暂停一下的，通常，只有在点击按钮后需要解析部分资源，以及点击按钮后产生的新元素等可能需要用 <code>timeout</code> 来短暂的等待它们出现。同样也可以使用 <code>should</code> 来进行判断。像点击下一页，点击创建，点击提交这些点击并不需要等待，但是点击编辑，点击按钮产生的新元素时，就会需要用 <code>timeout</code> 或者 <code>should</code> 来使测试在 CI 中更稳定一些。在 cypress 中，很多方法都支持 <code>timeout</code> ，当我们想延迟点击按钮时，我们可以为 <code>click</code> 加上 <code>timeout</code> 属性，来延迟点击它，当我们希望在点击后等待时，我们可以在点击后出现的元素中使用加上 <code>get</code> + <code>should</code> 的方法来确保它们出现后再往后进行，当然 <code>get</code> 同样支持 <code>timeout</code> 属性。</li>\n</ol>\n<p>注意：当 <code>click</code> 具有 <code>force</code> 属性时，<code>timeout</code> 将失效。</p>\n<ol start=\"2\">\n<li>那些用来等待解析资源的 <code>wait</code>。我发现在写编辑测试的时候，点击编辑按钮后，我们可以使用 <code>should</code> 判断一些元素是否正常出现，而不用使用 <code>wait</code> 来等待。同样对于等待 URL 解析的 <code>wait</code> 我们可以用 <code>intercept</code> 和 <code>wait</code> 搭配来等待域名的解析，像这样：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(&#x27;should set a accessible URL&#x27;, function () &#123;</span><br><span class=\"line\">  cy.visit(&#x27;/&#x27;);</span><br><span class=\"line\">  cy.get(selector.avatar).invoke(&#x27;show&#x27;).click(&#x27;center&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Settings&#x27;).click();</span><br><span class=\"line\">  cy.url().should(&#x27;contains&#x27;, &#x27;/settings&#x27;);</span><br><span class=\"line\">  cy.get(selector.grafanaURL).clear().type(data.validURL);</span><br><span class=\"line\">  cy.contains(&#x27;Submit&#x27;).click();</span><br><span class=\"line\"></span><br><span class=\"line\">  cy.get(selector.notificationMessage).should(&#x27;contain&#x27;, data.updateSuccessfully);</span><br><span class=\"line\">  cy.intercept(data.validURL).as(data.fetchURL);</span><br><span class=\"line\">  cy.wait(data.fetch);</span><br><span class=\"line\">  cy.get(selector.pageContainer).children().should(&#x27;contain&#x27;, &#x27;Dashboard&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里分享一个小技巧，我们可以使用在点击某个跳转之后，使用 <code>get</code> 获取任一元素，然后加一个 <code>click</code> 然后用 <code>should</code> 来判断它是否出现，就可以确保正确的访问到最新的 dom 元素，至于为什么用 <code>click</code> 是因为在对 dom 进行操作时，因为 Cypress 运行的速度非常快，如果只是寻找某个节点的信息，它不一定找到的是最新的 dom 节点，如果对旧 dom 进一步进行操作那就不对了。所以当找到的 dom 元素不是最新的时候，我们点击它之后，再用 <code>should</code> 方法来进行判断它是否是我们寻找的元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(&#x27;should edit route with cors form no allow_origins_by_regex configured&#x27;, function () &#123;</span><br><span class=\"line\">  cy.visit(&#x27;/&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Route&#x27;).click();</span><br><span class=\"line\">  cy.get(selector.name).clear().type(&#x27;routeName&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Search&#x27;).click();</span><br><span class=\"line\">  cy.contains(&#x27;routeName&#x27;).siblings().contains(&#x27;Configure&#x27;).click();</span><br><span class=\"line\">  cy.get(selector.name).should(&#x27;have.value&#x27;,&#x27;routeName&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Next&#x27;).click();</span><br><span class=\"line\">  cy.contains(&#x27;Next&#x27;).click();</span><br><span class=\"line\"></span><br><span class=\"line\">  // config cors plugin</span><br><span class=\"line\">  cy.contains(&#x27;cors&#x27;).parents(selector.pluginCardBordered).within(() =&gt; &#123;</span><br><span class=\"line\">    cy.get(&#x27;button&#x27;).click(&#123;</span><br><span class=\"line\">      force: true</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>路由跳转后的 <code>wait</code>。通常首次点击进入到某个页面后是不需要等待的，但是我在删除部分 <code>wait</code> 的时候，偶尔会遇到 CI 报错的情况，这种时候我会用三种方法来处理：</li>\n</ol>\n<ul>\n<li>通常页面中会有一个刷新的按钮，点击它使页面刷新。</li>\n<li>在 <code>click</code> 之后使用 <code>reload</code>，使页面重新加载。</li>\n<li>使用 <code>get</code> 获取元素，用 <code>should</code> 判断它正常出现。</li>\n</ul>\n<p>最后，以上便是我在删除 <code>wait</code> 时的分享，如果有我理解不对的地方，欢迎大家为我提出建议，感谢大家。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于删除前端测试中的-wait-的一些分享\"><a href=\"#关于删除前端测试中的-wait-的一些分享\" class=\"headerlink\" title=\"关于删除前端测试中的 wait 的一些分享\"></a>关于删除前端测试中的 wait 的一些分享</h2><p>2021-1-30</p>\n<p>最近学习了如何用 cypress 写前端的测试，在写测试的过程中，发现了一个经常可以见到的 <code>wait</code> 方法，起初我也不以为然，甚至对它产生了友好的感觉，一旦 CI 报错我就会尝试用 wait 来解决它，尽管实用，它也并不会影响测试的正常运行，但是在小伙伴告诉我，它不应该被这样用的时候，我重新去阅读了官方文档，官方文档写的很清楚，我们几乎不需要等待任何的时间在我们的测试中。并给出了一些规范的例子，然后我就开始将我测试中的<code>wait</code> 一个一个去除掉。在这里我分享一下我在删除那些测试中的 <code>wait</code> 时遇到的一些问题和技巧。</p>\n<hr>\n<p>我发现在一些测试中用了许多 <code>wait</code>，但其实这些 <code>wait</code> 并没有起到一点作用，（：直接删除掉就好了，并且不影响 CI 检查），我将列出一些列子与方法来讲解它们：</p>\n<ol>\n<li>那些通常出现在 <code>click</code> 之后的 <code>wait</code>。并不是每个点击之后都需要暂停一下的，通常，只有在点击按钮后需要解析部分资源，以及点击按钮后产生的新元素等可能需要用 <code>timeout</code> 来短暂的等待它们出现。同样也可以使用 <code>should</code> 来进行判断。像点击下一页，点击创建，点击提交这些点击并不需要等待，但是点击编辑，点击按钮产生的新元素时，就会需要用 <code>timeout</code> 或者 <code>should</code> 来使测试在 CI 中更稳定一些。在 cypress 中，很多方法都支持 <code>timeout</code> ，当我们想延迟点击按钮时，我们可以为 <code>click</code> 加上 <code>timeout</code> 属性，来延迟点击它，当我们希望在点击后等待时，我们可以在点击后出现的元素中使用加上 <code>get</code> + <code>should</code> 的方法来确保它们出现后再往后进行，当然 <code>get</code> 同样支持 <code>timeout</code> 属性。</li>\n</ol>\n<p>注意：当 <code>click</code> 具有 <code>force</code> 属性时，<code>timeout</code> 将失效。</p>\n<ol start=\"2\">\n<li>那些用来等待解析资源的 <code>wait</code>。我发现在写编辑测试的时候，点击编辑按钮后，我们可以使用 <code>should</code> 判断一些元素是否正常出现，而不用使用 <code>wait</code> 来等待。同样对于等待 URL 解析的 <code>wait</code> 我们可以用 <code>intercept</code> 和 <code>wait</code> 搭配来等待域名的解析，像这样：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(&#x27;should set a accessible URL&#x27;, function () &#123;</span><br><span class=\"line\">  cy.visit(&#x27;/&#x27;);</span><br><span class=\"line\">  cy.get(selector.avatar).invoke(&#x27;show&#x27;).click(&#x27;center&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Settings&#x27;).click();</span><br><span class=\"line\">  cy.url().should(&#x27;contains&#x27;, &#x27;/settings&#x27;);</span><br><span class=\"line\">  cy.get(selector.grafanaURL).clear().type(data.validURL);</span><br><span class=\"line\">  cy.contains(&#x27;Submit&#x27;).click();</span><br><span class=\"line\"></span><br><span class=\"line\">  cy.get(selector.notificationMessage).should(&#x27;contain&#x27;, data.updateSuccessfully);</span><br><span class=\"line\">  cy.intercept(data.validURL).as(data.fetchURL);</span><br><span class=\"line\">  cy.wait(data.fetch);</span><br><span class=\"line\">  cy.get(selector.pageContainer).children().should(&#x27;contain&#x27;, &#x27;Dashboard&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里分享一个小技巧，我们可以使用在点击某个跳转之后，使用 <code>get</code> 获取任一元素，然后加一个 <code>click</code> 然后用 <code>should</code> 来判断它是否出现，就可以确保正确的访问到最新的 dom 元素，至于为什么用 <code>click</code> 是因为在对 dom 进行操作时，因为 Cypress 运行的速度非常快，如果只是寻找某个节点的信息，它不一定找到的是最新的 dom 节点，如果对旧 dom 进一步进行操作那就不对了。所以当找到的 dom 元素不是最新的时候，我们点击它之后，再用 <code>should</code> 方法来进行判断它是否是我们寻找的元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it(&#x27;should edit route with cors form no allow_origins_by_regex configured&#x27;, function () &#123;</span><br><span class=\"line\">  cy.visit(&#x27;/&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Route&#x27;).click();</span><br><span class=\"line\">  cy.get(selector.name).clear().type(&#x27;routeName&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Search&#x27;).click();</span><br><span class=\"line\">  cy.contains(&#x27;routeName&#x27;).siblings().contains(&#x27;Configure&#x27;).click();</span><br><span class=\"line\">  cy.get(selector.name).should(&#x27;have.value&#x27;,&#x27;routeName&#x27;);</span><br><span class=\"line\">  cy.contains(&#x27;Next&#x27;).click();</span><br><span class=\"line\">  cy.contains(&#x27;Next&#x27;).click();</span><br><span class=\"line\"></span><br><span class=\"line\">  // config cors plugin</span><br><span class=\"line\">  cy.contains(&#x27;cors&#x27;).parents(selector.pluginCardBordered).within(() =&gt; &#123;</span><br><span class=\"line\">    cy.get(&#x27;button&#x27;).click(&#123;</span><br><span class=\"line\">      force: true</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>路由跳转后的 <code>wait</code>。通常首次点击进入到某个页面后是不需要等待的，但是我在删除部分 <code>wait</code> 的时候，偶尔会遇到 CI 报错的情况，这种时候我会用三种方法来处理：</li>\n</ol>\n<ul>\n<li>通常页面中会有一个刷新的按钮，点击它使页面刷新。</li>\n<li>在 <code>click</code> 之后使用 <code>reload</code>，使页面重新加载。</li>\n<li>使用 <code>get</code> 获取元素，用 <code>should</code> 判断它正常出现。</li>\n</ul>\n<p>最后，以上便是我在删除 <code>wait</code> 时的分享，如果有我理解不对的地方，欢迎大家为我提出建议，感谢大家。</p>\n"},{"title":"近一个月来工作的反思","date":"2021-08-06T16:00:00.000Z","_content":"\n## 近一个月来工作的反思\n\n2021-8-7\n\n换新工作到今天已经过去一个月了，和之前的工作模式大不相同，最近一直沉浸在自己的开发工作上，回想起来一个月前学习一些新技术知识立的 Flag 到今天没有什么进展，把近来一的一些想法和经历做下总结。\n\n--------\n\n### 远程工作效率\n\n远程工作效率肯定是要保证的，因为大家都不在一起，沟通起来，只能通过音频、视频、聊天的方式。每个人身上都有许多事情，自己一定要做好记录，做好记录之后还要对自己的事情有一定的计划安排。这里我有几点深刻体会：\n\n1. 不能把事情安排的太满。实际去开发和做事情的时候很可能会出现一些不可控的事情。比如开发时遇到一些需要时间处理的 Bug。完成开发任务后需要多人帮忙 Review 的时间也要考虑在内。自己的每一件事都要及时和团队的伙伴及时沟通进度，做计划时，都应该考虑到这些时间。有必要留出一些来预防。\n2. 每接受到新任务时，一定要实操、认识到任务的整个过程是如何进行的，提交将可能会遇到的问题、可能解决不了的问题一定要尽早问、提前说。这样既可以合理安排自己的时间，又可以提高自己的效率。\n3. 有一些任务在处理中会有一些新的想法和发现，这时要及时和团队成员沟通可行性，不可自己直接敲定，这样万一不可行，会导致浪费很大的开发时间，降低效率。可能一个简短的交流会就可以减少几个小时的开发工作。\n4. 工作中经常会遇到有问题需要找别人沟通的情况，团队中的伙伴都有自己的事情，如果小伙伴没有及时回复，自己也不要钻牛角尖，一定的时间内自己解决不掉的，可以先去做其他的事情，提高自己的效率。\n\n### 要有学习新知识的意识\n\nGitHub 中有许多很有意思的社区，从我刚开始学习这门技术开始，我也是通过社区一步一步学习一些新的东西。近一个月以来，我似乎有一些沉溺于开发了，每天好像都把重心放到了工作上面，没有挤出来一些时间去学习新的知识，在社区上做的事情也逐渐的变少了，几乎变成了社区上没有人找我的时候，我就忙着做自己的开发。整体上从主动的去关注社区，进而变成了被动的去关注它。\n\n刚前不久和琚老师唠嗑，他说我不能把所有的时间都用来忙在开发上和工作上，工作的内容并不只是有开发，我应该每天花点时间去关心一些有意思的开源项目，去看看别人的产品，去多看一些东西。当他问到我，我最近一个月来有学到哪些新的知识的时候，我才有一些幡然醒悟。我们都应该有自发的去关注新技术，学习更多的知识。提高我们自己也是帮助团队提高。回想起来过去一个月，我是有些乐此不疲的做开发了，看的东西变少了，其实自己也并不是没有时间去学习一些新的知识，只是我将这些时间都用在了开发上，唯一一点没有忘记的就是帮助社区中的人修 E2E 测试。只不过也是一些自己已经掌握的东西了。朋友问我之后我更想往“前”发展、还是往“后“发展，我当时说想往前，像致远那样，我自己也明白，那需要掌握大量的知识储备，如果没有足够广范围的知识储备，可能和别人聊天总聊不到一起。我最佩服琚老师的一点就是，他每次和别人聊天的时候，别人说的大部分对我来说很新颖的词，他都多多少少有一些了解。就好像是多啦Am梦的百宝箱，你问什么他都多多少少能说出来一些。\n\n知识也是需要时间来积累和沉淀的，自问近一个月来，我自发的去学习新知识的缺不如之前，并不是我没有时间去做，反思过后是我逐渐的没有意识到立马去做这件事。计划一件事情的时候，总是想着等不忙了就开始搞它。借用琚老师的话，怎么可能不忙啊，忙是忙不完的，活也是干不完的。琚老师提议说晚上就不要再开发了，可以画两个小时的时间去多看、多读、多学。提升自己，于自己，于团队都是件不折不扣的好事。\n\n### 调整作息时间\n\n我总是会熬夜去做一些开发之类的事情，之前不是远程工作的时候还好，因为第二天一大早要出去赶路，所以我不得不控制自己的睡眠时间，近一个月来，因为不用赶路帮我节省了很大一部分时间，我晚上睡的就更加晚了一些，我不是喜欢晚上做开发，我是喜欢晚上特别安静，让我可以什么都不用想的去写写写。但我知道这不是一个好习惯，得改。\n\n前几天小伙伴告诉我几个点，可能晚上写代码心会比较静，但是晚上的出货率的质量确实不如白天的高，而且对自己的身体也有一定的危害，久而久之、其实仔细想想也蛮可怕的，如果偶尔一次的熬夜无伤大雅，那么久而久之的这样，健康的问题确实会有一部分的担心。琚老师也总是说我，不要熬夜，之前也给我举过不少例子老警示我，可我总是不听，现在仔细想想我现在的状态，团队中很多的小伙伴一定都是过来人，不能说他们说的话都是正确的，但是对于熬夜这件事，不论从工作效率上来说，还是身体健康上来说都是正确的。\n\n### 总结反思\n\n最后，我决定接下来的日子，按照这次反思做出一些日常生活和工作状态的调整。\n\n- 对于工作效率我将会在时间规划和大家交流上严格控制自己，要时刻保持和大家多沟通的心情，不要钻牛角尖。\n- 晚上少做一些开发任务，花点时间做点自己的东西，多读、多看、多学。\n- 调整作息时间，晚上不要熬夜，白天早一点起来。周末可以时不时的安排一些放松的时间给自己。\n\n其实这一个月以来，我越来越喜欢上这份工作了，具体说不出来哪些喜欢，真要说的话，团队小伙伴的一些关心和热心帮助，让我感觉到大家的凝聚力，遇到事情大家都很热心的帮忙解决，让我赶紧到很温暖。每个人都有自己的事，自己会一步一步去跟进，遇到困难大家都会乐意帮忙解决。工作是充实自己生活的一大部分，做一件有意义和有意思的工作是非常重要的。加油吧！年轻人！\n","source":"_posts/2021-8-7.md","raw":"---\ntitle: 近一个月来工作的反思\ndate: 2021-08-07\n---\n\n## 近一个月来工作的反思\n\n2021-8-7\n\n换新工作到今天已经过去一个月了，和之前的工作模式大不相同，最近一直沉浸在自己的开发工作上，回想起来一个月前学习一些新技术知识立的 Flag 到今天没有什么进展，把近来一的一些想法和经历做下总结。\n\n--------\n\n### 远程工作效率\n\n远程工作效率肯定是要保证的，因为大家都不在一起，沟通起来，只能通过音频、视频、聊天的方式。每个人身上都有许多事情，自己一定要做好记录，做好记录之后还要对自己的事情有一定的计划安排。这里我有几点深刻体会：\n\n1. 不能把事情安排的太满。实际去开发和做事情的时候很可能会出现一些不可控的事情。比如开发时遇到一些需要时间处理的 Bug。完成开发任务后需要多人帮忙 Review 的时间也要考虑在内。自己的每一件事都要及时和团队的伙伴及时沟通进度，做计划时，都应该考虑到这些时间。有必要留出一些来预防。\n2. 每接受到新任务时，一定要实操、认识到任务的整个过程是如何进行的，提交将可能会遇到的问题、可能解决不了的问题一定要尽早问、提前说。这样既可以合理安排自己的时间，又可以提高自己的效率。\n3. 有一些任务在处理中会有一些新的想法和发现，这时要及时和团队成员沟通可行性，不可自己直接敲定，这样万一不可行，会导致浪费很大的开发时间，降低效率。可能一个简短的交流会就可以减少几个小时的开发工作。\n4. 工作中经常会遇到有问题需要找别人沟通的情况，团队中的伙伴都有自己的事情，如果小伙伴没有及时回复，自己也不要钻牛角尖，一定的时间内自己解决不掉的，可以先去做其他的事情，提高自己的效率。\n\n### 要有学习新知识的意识\n\nGitHub 中有许多很有意思的社区，从我刚开始学习这门技术开始，我也是通过社区一步一步学习一些新的东西。近一个月以来，我似乎有一些沉溺于开发了，每天好像都把重心放到了工作上面，没有挤出来一些时间去学习新的知识，在社区上做的事情也逐渐的变少了，几乎变成了社区上没有人找我的时候，我就忙着做自己的开发。整体上从主动的去关注社区，进而变成了被动的去关注它。\n\n刚前不久和琚老师唠嗑，他说我不能把所有的时间都用来忙在开发上和工作上，工作的内容并不只是有开发，我应该每天花点时间去关心一些有意思的开源项目，去看看别人的产品，去多看一些东西。当他问到我，我最近一个月来有学到哪些新的知识的时候，我才有一些幡然醒悟。我们都应该有自发的去关注新技术，学习更多的知识。提高我们自己也是帮助团队提高。回想起来过去一个月，我是有些乐此不疲的做开发了，看的东西变少了，其实自己也并不是没有时间去学习一些新的知识，只是我将这些时间都用在了开发上，唯一一点没有忘记的就是帮助社区中的人修 E2E 测试。只不过也是一些自己已经掌握的东西了。朋友问我之后我更想往“前”发展、还是往“后“发展，我当时说想往前，像致远那样，我自己也明白，那需要掌握大量的知识储备，如果没有足够广范围的知识储备，可能和别人聊天总聊不到一起。我最佩服琚老师的一点就是，他每次和别人聊天的时候，别人说的大部分对我来说很新颖的词，他都多多少少有一些了解。就好像是多啦Am梦的百宝箱，你问什么他都多多少少能说出来一些。\n\n知识也是需要时间来积累和沉淀的，自问近一个月来，我自发的去学习新知识的缺不如之前，并不是我没有时间去做，反思过后是我逐渐的没有意识到立马去做这件事。计划一件事情的时候，总是想着等不忙了就开始搞它。借用琚老师的话，怎么可能不忙啊，忙是忙不完的，活也是干不完的。琚老师提议说晚上就不要再开发了，可以画两个小时的时间去多看、多读、多学。提升自己，于自己，于团队都是件不折不扣的好事。\n\n### 调整作息时间\n\n我总是会熬夜去做一些开发之类的事情，之前不是远程工作的时候还好，因为第二天一大早要出去赶路，所以我不得不控制自己的睡眠时间，近一个月来，因为不用赶路帮我节省了很大一部分时间，我晚上睡的就更加晚了一些，我不是喜欢晚上做开发，我是喜欢晚上特别安静，让我可以什么都不用想的去写写写。但我知道这不是一个好习惯，得改。\n\n前几天小伙伴告诉我几个点，可能晚上写代码心会比较静，但是晚上的出货率的质量确实不如白天的高，而且对自己的身体也有一定的危害，久而久之、其实仔细想想也蛮可怕的，如果偶尔一次的熬夜无伤大雅，那么久而久之的这样，健康的问题确实会有一部分的担心。琚老师也总是说我，不要熬夜，之前也给我举过不少例子老警示我，可我总是不听，现在仔细想想我现在的状态，团队中很多的小伙伴一定都是过来人，不能说他们说的话都是正确的，但是对于熬夜这件事，不论从工作效率上来说，还是身体健康上来说都是正确的。\n\n### 总结反思\n\n最后，我决定接下来的日子，按照这次反思做出一些日常生活和工作状态的调整。\n\n- 对于工作效率我将会在时间规划和大家交流上严格控制自己，要时刻保持和大家多沟通的心情，不要钻牛角尖。\n- 晚上少做一些开发任务，花点时间做点自己的东西，多读、多看、多学。\n- 调整作息时间，晚上不要熬夜，白天早一点起来。周末可以时不时的安排一些放松的时间给自己。\n\n其实这一个月以来，我越来越喜欢上这份工作了，具体说不出来哪些喜欢，真要说的话，团队小伙伴的一些关心和热心帮助，让我感觉到大家的凝聚力，遇到事情大家都很热心的帮忙解决，让我赶紧到很温暖。每个人都有自己的事，自己会一步一步去跟进，遇到困难大家都会乐意帮忙解决。工作是充实自己生活的一大部分，做一件有意义和有意思的工作是非常重要的。加油吧！年轻人！\n","slug":"2021-8-7","published":1,"updated":"2022-01-07T05:39:38.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky403nf80006crulast900lm","content":"<h2 id=\"近一个月来工作的反思\"><a href=\"#近一个月来工作的反思\" class=\"headerlink\" title=\"近一个月来工作的反思\"></a>近一个月来工作的反思</h2><p>2021-8-7</p>\n<p>换新工作到今天已经过去一个月了，和之前的工作模式大不相同，最近一直沉浸在自己的开发工作上，回想起来一个月前学习一些新技术知识立的 Flag 到今天没有什么进展，把近来一的一些想法和经历做下总结。</p>\n<hr>\n<h3 id=\"远程工作效率\"><a href=\"#远程工作效率\" class=\"headerlink\" title=\"远程工作效率\"></a>远程工作效率</h3><p>远程工作效率肯定是要保证的，因为大家都不在一起，沟通起来，只能通过音频、视频、聊天的方式。每个人身上都有许多事情，自己一定要做好记录，做好记录之后还要对自己的事情有一定的计划安排。这里我有几点深刻体会：</p>\n<ol>\n<li>不能把事情安排的太满。实际去开发和做事情的时候很可能会出现一些不可控的事情。比如开发时遇到一些需要时间处理的 Bug。完成开发任务后需要多人帮忙 Review 的时间也要考虑在内。自己的每一件事都要及时和团队的伙伴及时沟通进度，做计划时，都应该考虑到这些时间。有必要留出一些来预防。</li>\n<li>每接受到新任务时，一定要实操、认识到任务的整个过程是如何进行的，提交将可能会遇到的问题、可能解决不了的问题一定要尽早问、提前说。这样既可以合理安排自己的时间，又可以提高自己的效率。</li>\n<li>有一些任务在处理中会有一些新的想法和发现，这时要及时和团队成员沟通可行性，不可自己直接敲定，这样万一不可行，会导致浪费很大的开发时间，降低效率。可能一个简短的交流会就可以减少几个小时的开发工作。</li>\n<li>工作中经常会遇到有问题需要找别人沟通的情况，团队中的伙伴都有自己的事情，如果小伙伴没有及时回复，自己也不要钻牛角尖，一定的时间内自己解决不掉的，可以先去做其他的事情，提高自己的效率。</li>\n</ol>\n<h3 id=\"要有学习新知识的意识\"><a href=\"#要有学习新知识的意识\" class=\"headerlink\" title=\"要有学习新知识的意识\"></a>要有学习新知识的意识</h3><p>GitHub 中有许多很有意思的社区，从我刚开始学习这门技术开始，我也是通过社区一步一步学习一些新的东西。近一个月以来，我似乎有一些沉溺于开发了，每天好像都把重心放到了工作上面，没有挤出来一些时间去学习新的知识，在社区上做的事情也逐渐的变少了，几乎变成了社区上没有人找我的时候，我就忙着做自己的开发。整体上从主动的去关注社区，进而变成了被动的去关注它。</p>\n<p>刚前不久和琚老师唠嗑，他说我不能把所有的时间都用来忙在开发上和工作上，工作的内容并不只是有开发，我应该每天花点时间去关心一些有意思的开源项目，去看看别人的产品，去多看一些东西。当他问到我，我最近一个月来有学到哪些新的知识的时候，我才有一些幡然醒悟。我们都应该有自发的去关注新技术，学习更多的知识。提高我们自己也是帮助团队提高。回想起来过去一个月，我是有些乐此不疲的做开发了，看的东西变少了，其实自己也并不是没有时间去学习一些新的知识，只是我将这些时间都用在了开发上，唯一一点没有忘记的就是帮助社区中的人修 E2E 测试。只不过也是一些自己已经掌握的东西了。朋友问我之后我更想往“前”发展、还是往“后“发展，我当时说想往前，像致远那样，我自己也明白，那需要掌握大量的知识储备，如果没有足够广范围的知识储备，可能和别人聊天总聊不到一起。我最佩服琚老师的一点就是，他每次和别人聊天的时候，别人说的大部分对我来说很新颖的词，他都多多少少有一些了解。就好像是多啦Am梦的百宝箱，你问什么他都多多少少能说出来一些。</p>\n<p>知识也是需要时间来积累和沉淀的，自问近一个月来，我自发的去学习新知识的缺不如之前，并不是我没有时间去做，反思过后是我逐渐的没有意识到立马去做这件事。计划一件事情的时候，总是想着等不忙了就开始搞它。借用琚老师的话，怎么可能不忙啊，忙是忙不完的，活也是干不完的。琚老师提议说晚上就不要再开发了，可以画两个小时的时间去多看、多读、多学。提升自己，于自己，于团队都是件不折不扣的好事。</p>\n<h3 id=\"调整作息时间\"><a href=\"#调整作息时间\" class=\"headerlink\" title=\"调整作息时间\"></a>调整作息时间</h3><p>我总是会熬夜去做一些开发之类的事情，之前不是远程工作的时候还好，因为第二天一大早要出去赶路，所以我不得不控制自己的睡眠时间，近一个月来，因为不用赶路帮我节省了很大一部分时间，我晚上睡的就更加晚了一些，我不是喜欢晚上做开发，我是喜欢晚上特别安静，让我可以什么都不用想的去写写写。但我知道这不是一个好习惯，得改。</p>\n<p>前几天小伙伴告诉我几个点，可能晚上写代码心会比较静，但是晚上的出货率的质量确实不如白天的高，而且对自己的身体也有一定的危害，久而久之、其实仔细想想也蛮可怕的，如果偶尔一次的熬夜无伤大雅，那么久而久之的这样，健康的问题确实会有一部分的担心。琚老师也总是说我，不要熬夜，之前也给我举过不少例子老警示我，可我总是不听，现在仔细想想我现在的状态，团队中很多的小伙伴一定都是过来人，不能说他们说的话都是正确的，但是对于熬夜这件事，不论从工作效率上来说，还是身体健康上来说都是正确的。</p>\n<h3 id=\"总结反思\"><a href=\"#总结反思\" class=\"headerlink\" title=\"总结反思\"></a>总结反思</h3><p>最后，我决定接下来的日子，按照这次反思做出一些日常生活和工作状态的调整。</p>\n<ul>\n<li>对于工作效率我将会在时间规划和大家交流上严格控制自己，要时刻保持和大家多沟通的心情，不要钻牛角尖。</li>\n<li>晚上少做一些开发任务，花点时间做点自己的东西，多读、多看、多学。</li>\n<li>调整作息时间，晚上不要熬夜，白天早一点起来。周末可以时不时的安排一些放松的时间给自己。</li>\n</ul>\n<p>其实这一个月以来，我越来越喜欢上这份工作了，具体说不出来哪些喜欢，真要说的话，团队小伙伴的一些关心和热心帮助，让我感觉到大家的凝聚力，遇到事情大家都很热心的帮忙解决，让我赶紧到很温暖。每个人都有自己的事，自己会一步一步去跟进，遇到困难大家都会乐意帮忙解决。工作是充实自己生活的一大部分，做一件有意义和有意思的工作是非常重要的。加油吧！年轻人！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"近一个月来工作的反思\"><a href=\"#近一个月来工作的反思\" class=\"headerlink\" title=\"近一个月来工作的反思\"></a>近一个月来工作的反思</h2><p>2021-8-7</p>\n<p>换新工作到今天已经过去一个月了，和之前的工作模式大不相同，最近一直沉浸在自己的开发工作上，回想起来一个月前学习一些新技术知识立的 Flag 到今天没有什么进展，把近来一的一些想法和经历做下总结。</p>\n<hr>\n<h3 id=\"远程工作效率\"><a href=\"#远程工作效率\" class=\"headerlink\" title=\"远程工作效率\"></a>远程工作效率</h3><p>远程工作效率肯定是要保证的，因为大家都不在一起，沟通起来，只能通过音频、视频、聊天的方式。每个人身上都有许多事情，自己一定要做好记录，做好记录之后还要对自己的事情有一定的计划安排。这里我有几点深刻体会：</p>\n<ol>\n<li>不能把事情安排的太满。实际去开发和做事情的时候很可能会出现一些不可控的事情。比如开发时遇到一些需要时间处理的 Bug。完成开发任务后需要多人帮忙 Review 的时间也要考虑在内。自己的每一件事都要及时和团队的伙伴及时沟通进度，做计划时，都应该考虑到这些时间。有必要留出一些来预防。</li>\n<li>每接受到新任务时，一定要实操、认识到任务的整个过程是如何进行的，提交将可能会遇到的问题、可能解决不了的问题一定要尽早问、提前说。这样既可以合理安排自己的时间，又可以提高自己的效率。</li>\n<li>有一些任务在处理中会有一些新的想法和发现，这时要及时和团队成员沟通可行性，不可自己直接敲定，这样万一不可行，会导致浪费很大的开发时间，降低效率。可能一个简短的交流会就可以减少几个小时的开发工作。</li>\n<li>工作中经常会遇到有问题需要找别人沟通的情况，团队中的伙伴都有自己的事情，如果小伙伴没有及时回复，自己也不要钻牛角尖，一定的时间内自己解决不掉的，可以先去做其他的事情，提高自己的效率。</li>\n</ol>\n<h3 id=\"要有学习新知识的意识\"><a href=\"#要有学习新知识的意识\" class=\"headerlink\" title=\"要有学习新知识的意识\"></a>要有学习新知识的意识</h3><p>GitHub 中有许多很有意思的社区，从我刚开始学习这门技术开始，我也是通过社区一步一步学习一些新的东西。近一个月以来，我似乎有一些沉溺于开发了，每天好像都把重心放到了工作上面，没有挤出来一些时间去学习新的知识，在社区上做的事情也逐渐的变少了，几乎变成了社区上没有人找我的时候，我就忙着做自己的开发。整体上从主动的去关注社区，进而变成了被动的去关注它。</p>\n<p>刚前不久和琚老师唠嗑，他说我不能把所有的时间都用来忙在开发上和工作上，工作的内容并不只是有开发，我应该每天花点时间去关心一些有意思的开源项目，去看看别人的产品，去多看一些东西。当他问到我，我最近一个月来有学到哪些新的知识的时候，我才有一些幡然醒悟。我们都应该有自发的去关注新技术，学习更多的知识。提高我们自己也是帮助团队提高。回想起来过去一个月，我是有些乐此不疲的做开发了，看的东西变少了，其实自己也并不是没有时间去学习一些新的知识，只是我将这些时间都用在了开发上，唯一一点没有忘记的就是帮助社区中的人修 E2E 测试。只不过也是一些自己已经掌握的东西了。朋友问我之后我更想往“前”发展、还是往“后“发展，我当时说想往前，像致远那样，我自己也明白，那需要掌握大量的知识储备，如果没有足够广范围的知识储备，可能和别人聊天总聊不到一起。我最佩服琚老师的一点就是，他每次和别人聊天的时候，别人说的大部分对我来说很新颖的词，他都多多少少有一些了解。就好像是多啦Am梦的百宝箱，你问什么他都多多少少能说出来一些。</p>\n<p>知识也是需要时间来积累和沉淀的，自问近一个月来，我自发的去学习新知识的缺不如之前，并不是我没有时间去做，反思过后是我逐渐的没有意识到立马去做这件事。计划一件事情的时候，总是想着等不忙了就开始搞它。借用琚老师的话，怎么可能不忙啊，忙是忙不完的，活也是干不完的。琚老师提议说晚上就不要再开发了，可以画两个小时的时间去多看、多读、多学。提升自己，于自己，于团队都是件不折不扣的好事。</p>\n<h3 id=\"调整作息时间\"><a href=\"#调整作息时间\" class=\"headerlink\" title=\"调整作息时间\"></a>调整作息时间</h3><p>我总是会熬夜去做一些开发之类的事情，之前不是远程工作的时候还好，因为第二天一大早要出去赶路，所以我不得不控制自己的睡眠时间，近一个月来，因为不用赶路帮我节省了很大一部分时间，我晚上睡的就更加晚了一些，我不是喜欢晚上做开发，我是喜欢晚上特别安静，让我可以什么都不用想的去写写写。但我知道这不是一个好习惯，得改。</p>\n<p>前几天小伙伴告诉我几个点，可能晚上写代码心会比较静，但是晚上的出货率的质量确实不如白天的高，而且对自己的身体也有一定的危害，久而久之、其实仔细想想也蛮可怕的，如果偶尔一次的熬夜无伤大雅，那么久而久之的这样，健康的问题确实会有一部分的担心。琚老师也总是说我，不要熬夜，之前也给我举过不少例子老警示我，可我总是不听，现在仔细想想我现在的状态，团队中很多的小伙伴一定都是过来人，不能说他们说的话都是正确的，但是对于熬夜这件事，不论从工作效率上来说，还是身体健康上来说都是正确的。</p>\n<h3 id=\"总结反思\"><a href=\"#总结反思\" class=\"headerlink\" title=\"总结反思\"></a>总结反思</h3><p>最后，我决定接下来的日子，按照这次反思做出一些日常生活和工作状态的调整。</p>\n<ul>\n<li>对于工作效率我将会在时间规划和大家交流上严格控制自己，要时刻保持和大家多沟通的心情，不要钻牛角尖。</li>\n<li>晚上少做一些开发任务，花点时间做点自己的东西，多读、多看、多学。</li>\n<li>调整作息时间，晚上不要熬夜，白天早一点起来。周末可以时不时的安排一些放松的时间给自己。</li>\n</ul>\n<p>其实这一个月以来，我越来越喜欢上这份工作了，具体说不出来哪些喜欢，真要说的话，团队小伙伴的一些关心和热心帮助，让我感觉到大家的凝聚力，遇到事情大家都很热心的帮忙解决，让我赶紧到很温暖。每个人都有自己的事，自己会一步一步去跟进，遇到困难大家都会乐意帮忙解决。工作是充实自己生活的一大部分，做一件有意义和有意思的工作是非常重要的。加油吧！年轻人！</p>\n"},{"title":"APISIX 在 arm 版 ubuntu 构建踩坑日记","date":"2022-01-06T16:00:00.000Z","_content":"\n# APISIX 在 arm 版 ubuntu 构建踩坑日记\n\n2022-01-07\n\n本篇文章记录了通过源码构建 APISIX 的踩坑记录，ubuntu 环境使用的是 [https://multipass.run/](https://multipass.run/) 中的 Multipass 。\n\n## 克隆源码\n\n首先根据 [官方文档](https://apisix.apache.org/zh/docs/apisix/how-to-build#%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85) 安装 APISIX 源码仓库。并且进入项目文件。\n\n```shell\ncd apisix-2.11.0\n```\n\n## 安装项目依赖\n\n1. 现在我们可以通过脚本一键安装项目所需要的依赖拉，在根目录下运行下面命令：\n\n```shell\nbash utils/install-dependencies.sh\n```\n\n![1.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/1.png)\n\n不出所料，没有成功跑完。通过错误提示我们知道，这里是未能成功安装 `OpenResty`。原因是默认没有 `arm 64` 平台的源。\n\n2. 下面我们手动安装下 OpenResty：参考 [https://openresty.org/cn/linux-packages.html#ubuntu](https://openresty.org/cn/linux-packages.html#ubuntu)\n\n- 步骤一：安装导入 GPG 公钥时所需的几个依赖包（整个安装过程完成后可以随时删除它们）：\n\n```shell\nsudo apt-get -y install --no-install-recommends wget gnupg ca-certificates\n```\n\n- 步骤二：导入我们的 GPG 密钥：\n\n```shell\nwget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\n```\n\n成功：\n\n![2.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/2.png)\n\n- 步骤三：添加 OpenResty 官方 APT 仓库。对于 x86_64 或 amd64 系统，可以使用下面的命令：\n\n```shell\necho \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\" \\\n    | sudo tee /etc/apt/sources.list.d/openresty.list\n```\n\n- 而对于 arm64 或 aarch64 系统，则可以使用下面的命令:（我在 M1 上运行的是该命令，上个命令会报错）\n\n```shell\necho \"deb http://openresty.org/package/arm64/ubuntu $(lsb_release -sc) main\" \\\n    | sudo tee /etc/apt/sources.list.d/openresty.list\n```\n\n- 步骤四：更新 APT 索引：\n\n```shell\nsudo apt-get update\n```\n然后就可以像下面这样安装软件包，比如 `OpenResty`：\n\n```shell\nsudo apt-get -y install openresty\n```\n\n- 步骤五：（可选）可以通过下面命令删除该包和对应的关联包：\n\n```shell\nsudo apt-get -y install --no-install-recommends software-properties-common\n```\n\n成功安装 `OpenResty` :\n\n![3.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/3.png)\n\n3. 重新运行安装依赖脚本 （参考上面 1. ）\n4. 接着运行 `LUAROCKS_SERVER=https://luarocks.cn` 命令安装依赖：\n\n![4.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/4.png)\n\n运行下面命令即可：\n\n```shell\ncurl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -\n```\n\n![5.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/5.png)\n\n又出现错误提示了。。。接着运行下面命令：\n\n```shell\nsudo apt install wget sudo unzip\n```\n\n接着我们重新运行一次：\n\n```shell\ncurl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -\n```\n\n然后我们继续运行安装依赖的命令：`LUAROCKS_SERVER=https://luarocks.cn make deps`\n终于成功了，哭了，坑确实太多了。\n\n![6.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/6.png)\n\n大部分依赖已经成功安装好，但是又有新的错误提示了。\n这里看起来是两个仓库未能成功克隆下来，没关系，先往后面运行试试：\n\n5. 安装 APISIX 命令\n\n```shell\nmake install\n// 如果出现权限不足的提示，用 sudo make install\n```\n\n成功：\n\n![7.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/7.png)\n\n## 安装 etcd\n\n### 踩坑 etcd\n\n启动 APISIX 之前需要安装下 etcd，参考 [官方文档](https://apisix.apache.org/docs/apisix/2.10/install-dependencies/#ubuntu-1604--1804)\n\n>（由于该安装教程并不是针对 arm 写的，所以虽然成功安装了 etcd，但是未能成功将 etcd 运行起来，原因是因为默认使用的 x86 的二进制文件启动，所以无法运行。可以跳过该部分直接参考在 「docker 中运行 etcd 服务」部分）\n\n- 第一步运行：\n\n```shell\nwget https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz\n```\n\n- 第二部运行：\n\n```shell\ntar -xvf etcd-v3.4.13-linux-amd64.tar.gz && \\    cd etcd-v3.4.13-linux-amd64 && \\    sudo cp -a etcd etcdctl /usr/bin/\n```\n\n成功：\n\n![8.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/8.png)\n\n- 第三部启动 etcd 服务\n\n```shell\nnohup etcd &\n```\n\n![9.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/9.png)\n\n然后我在后面运行 APISIX 时发现 etcd 报错了：\n\n![10.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/10.png)\n\n发现在 arm 上的 ubuntu 裸跑 etcd 坑太多了，各种各样的错误，后来决定还是跑 docker 吧～\n\n### 在 docker 中运行 etcd 服务\n\n1. 安装 docker \n\n```shell\nsudo apt install docker.io\n```\n\nTip: docker 常用的命令：(无权限错误在命令前添加 sudo)\n- 查看所有容器列表 docker ps -a\n- 查看正在运行的容器列表 docker ps\n- 查看镜像列表 docker image list\n- 删除所有容器 docker container prune\n- 删除所有镜像 docker image prune -f -a\n更多参考：[Docker 入门教程 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html)\n\n2. 拉取并运行 etcd\n\n```shell\nsudo docker run -d --name etcd -p 2379:2379 -e ETCD_UNSUPPORTED_ARCH=arm64 -e ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 -e ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379 gcr.io/etcd-development/etcd:v3.5.1-arm64\n```\n\n注意：该镜像需要开代理。\n成功：\n\n![11.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/11.png)\n\n验证是否运行：\n\n```shell\nsudo docker ps -a\n```\n\n![12.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/12.png)\n\n这样，etcd 已经成功启动了。\n\n## 启动 APISIX\n\n所有的依赖项目已经准备完毕，现在我们可以启动 APISIX 拉～直接参考如何构建 APISIX [官方文档](https://apisix.apache.org/docs/apisix/how-to-build)\n\n- 第一步安装依赖\n\n```shell\nmake deps\nmake install\n```\n\n- 第二部初始化依赖，启动 APISIX\n\n```shell\napisix init\n\n// start APISIX\napisix start\n\n// stop APISIX\napisix stop\n```\n\n![13.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/13.png)\n\n没有任何错误信息了，完美收工！\n\n## 总结：\n\n总体来说，有两个大坑是安装 APISIX 依赖部分和 arm 的 etcd 部分，etcd 部分可以直接用 docker 来解决，不过在拉取镜像的时候也会有一些坑，直接换别的镜像尝试就好。如果以后别人再问我用 M1 开发有什么建议吗，那我就建议：珍爱生命，远离 M1 😂 -- 引自白泽平同学。\n","source":"_posts/2022-01-07.md","raw":"---\ntitle: APISIX 在 arm 版 ubuntu 构建踩坑日记\ndate: 2022-01-07\n---\n\n# APISIX 在 arm 版 ubuntu 构建踩坑日记\n\n2022-01-07\n\n本篇文章记录了通过源码构建 APISIX 的踩坑记录，ubuntu 环境使用的是 [https://multipass.run/](https://multipass.run/) 中的 Multipass 。\n\n## 克隆源码\n\n首先根据 [官方文档](https://apisix.apache.org/zh/docs/apisix/how-to-build#%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85) 安装 APISIX 源码仓库。并且进入项目文件。\n\n```shell\ncd apisix-2.11.0\n```\n\n## 安装项目依赖\n\n1. 现在我们可以通过脚本一键安装项目所需要的依赖拉，在根目录下运行下面命令：\n\n```shell\nbash utils/install-dependencies.sh\n```\n\n![1.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/1.png)\n\n不出所料，没有成功跑完。通过错误提示我们知道，这里是未能成功安装 `OpenResty`。原因是默认没有 `arm 64` 平台的源。\n\n2. 下面我们手动安装下 OpenResty：参考 [https://openresty.org/cn/linux-packages.html#ubuntu](https://openresty.org/cn/linux-packages.html#ubuntu)\n\n- 步骤一：安装导入 GPG 公钥时所需的几个依赖包（整个安装过程完成后可以随时删除它们）：\n\n```shell\nsudo apt-get -y install --no-install-recommends wget gnupg ca-certificates\n```\n\n- 步骤二：导入我们的 GPG 密钥：\n\n```shell\nwget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\n```\n\n成功：\n\n![2.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/2.png)\n\n- 步骤三：添加 OpenResty 官方 APT 仓库。对于 x86_64 或 amd64 系统，可以使用下面的命令：\n\n```shell\necho \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\" \\\n    | sudo tee /etc/apt/sources.list.d/openresty.list\n```\n\n- 而对于 arm64 或 aarch64 系统，则可以使用下面的命令:（我在 M1 上运行的是该命令，上个命令会报错）\n\n```shell\necho \"deb http://openresty.org/package/arm64/ubuntu $(lsb_release -sc) main\" \\\n    | sudo tee /etc/apt/sources.list.d/openresty.list\n```\n\n- 步骤四：更新 APT 索引：\n\n```shell\nsudo apt-get update\n```\n然后就可以像下面这样安装软件包，比如 `OpenResty`：\n\n```shell\nsudo apt-get -y install openresty\n```\n\n- 步骤五：（可选）可以通过下面命令删除该包和对应的关联包：\n\n```shell\nsudo apt-get -y install --no-install-recommends software-properties-common\n```\n\n成功安装 `OpenResty` :\n\n![3.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/3.png)\n\n3. 重新运行安装依赖脚本 （参考上面 1. ）\n4. 接着运行 `LUAROCKS_SERVER=https://luarocks.cn` 命令安装依赖：\n\n![4.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/4.png)\n\n运行下面命令即可：\n\n```shell\ncurl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -\n```\n\n![5.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/5.png)\n\n又出现错误提示了。。。接着运行下面命令：\n\n```shell\nsudo apt install wget sudo unzip\n```\n\n接着我们重新运行一次：\n\n```shell\ncurl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -\n```\n\n然后我们继续运行安装依赖的命令：`LUAROCKS_SERVER=https://luarocks.cn make deps`\n终于成功了，哭了，坑确实太多了。\n\n![6.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/6.png)\n\n大部分依赖已经成功安装好，但是又有新的错误提示了。\n这里看起来是两个仓库未能成功克隆下来，没关系，先往后面运行试试：\n\n5. 安装 APISIX 命令\n\n```shell\nmake install\n// 如果出现权限不足的提示，用 sudo make install\n```\n\n成功：\n\n![7.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/7.png)\n\n## 安装 etcd\n\n### 踩坑 etcd\n\n启动 APISIX 之前需要安装下 etcd，参考 [官方文档](https://apisix.apache.org/docs/apisix/2.10/install-dependencies/#ubuntu-1604--1804)\n\n>（由于该安装教程并不是针对 arm 写的，所以虽然成功安装了 etcd，但是未能成功将 etcd 运行起来，原因是因为默认使用的 x86 的二进制文件启动，所以无法运行。可以跳过该部分直接参考在 「docker 中运行 etcd 服务」部分）\n\n- 第一步运行：\n\n```shell\nwget https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz\n```\n\n- 第二部运行：\n\n```shell\ntar -xvf etcd-v3.4.13-linux-amd64.tar.gz && \\    cd etcd-v3.4.13-linux-amd64 && \\    sudo cp -a etcd etcdctl /usr/bin/\n```\n\n成功：\n\n![8.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/8.png)\n\n- 第三部启动 etcd 服务\n\n```shell\nnohup etcd &\n```\n\n![9.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/9.png)\n\n然后我在后面运行 APISIX 时发现 etcd 报错了：\n\n![10.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/10.png)\n\n发现在 arm 上的 ubuntu 裸跑 etcd 坑太多了，各种各样的错误，后来决定还是跑 docker 吧～\n\n### 在 docker 中运行 etcd 服务\n\n1. 安装 docker \n\n```shell\nsudo apt install docker.io\n```\n\nTip: docker 常用的命令：(无权限错误在命令前添加 sudo)\n- 查看所有容器列表 docker ps -a\n- 查看正在运行的容器列表 docker ps\n- 查看镜像列表 docker image list\n- 删除所有容器 docker container prune\n- 删除所有镜像 docker image prune -f -a\n更多参考：[Docker 入门教程 - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html)\n\n2. 拉取并运行 etcd\n\n```shell\nsudo docker run -d --name etcd -p 2379:2379 -e ETCD_UNSUPPORTED_ARCH=arm64 -e ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 -e ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379 gcr.io/etcd-development/etcd:v3.5.1-arm64\n```\n\n注意：该镜像需要开代理。\n成功：\n\n![11.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/11.png)\n\n验证是否运行：\n\n```shell\nsudo docker ps -a\n```\n\n![12.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/12.png)\n\n这样，etcd 已经成功启动了。\n\n## 启动 APISIX\n\n所有的依赖项目已经准备完毕，现在我们可以启动 APISIX 拉～直接参考如何构建 APISIX [官方文档](https://apisix.apache.org/docs/apisix/how-to-build)\n\n- 第一步安装依赖\n\n```shell\nmake deps\nmake install\n```\n\n- 第二部初始化依赖，启动 APISIX\n\n```shell\napisix init\n\n// start APISIX\napisix start\n\n// stop APISIX\napisix stop\n```\n\n![13.png](https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/13.png)\n\n没有任何错误信息了，完美收工！\n\n## 总结：\n\n总体来说，有两个大坑是安装 APISIX 依赖部分和 arm 的 etcd 部分，etcd 部分可以直接用 docker 来解决，不过在拉取镜像的时候也会有一些坑，直接换别的镜像尝试就好。如果以后别人再问我用 M1 开发有什么建议吗，那我就建议：珍爱生命，远离 M1 😂 -- 引自白泽平同学。\n","slug":"2022-01-07","published":1,"updated":"2022-01-08T11:00:24.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky5pv7900000rcul2bze3pat","content":"<h1 id=\"APISIX-在-arm-版-ubuntu-构建踩坑日记\"><a href=\"#APISIX-在-arm-版-ubuntu-构建踩坑日记\" class=\"headerlink\" title=\"APISIX 在 arm 版 ubuntu 构建踩坑日记\"></a>APISIX 在 arm 版 ubuntu 构建踩坑日记</h1><p>2022-01-07</p>\n<p>本篇文章记录了通过源码构建 APISIX 的踩坑记录，ubuntu 环境使用的是 <a href=\"https://multipass.run/\">https://multipass.run/</a> 中的 Multipass 。</p>\n<h2 id=\"克隆源码\"><a href=\"#克隆源码\" class=\"headerlink\" title=\"克隆源码\"></a>克隆源码</h2><p>首先根据 <a href=\"https://apisix.apache.org/zh/docs/apisix/how-to-build#%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85\">官方文档</a> 安装 APISIX 源码仓库。并且进入项目文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apisix-2.11.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装项目依赖\"><a href=\"#安装项目依赖\" class=\"headerlink\" title=\"安装项目依赖\"></a>安装项目依赖</h2><ol>\n<li>现在我们可以通过脚本一键安装项目所需要的依赖拉，在根目录下运行下面命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash utils/install-dependencies.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/1.png\" alt=\"1.png\"></p>\n<p>不出所料，没有成功跑完。通过错误提示我们知道，这里是未能成功安装 <code>OpenResty</code>。原因是默认没有 <code>arm 64</code> 平台的源。</p>\n<ol start=\"2\">\n<li>下面我们手动安装下 OpenResty：参考 <a href=\"https://openresty.org/cn/linux-packages.html#ubuntu\">https://openresty.org/cn/linux-packages.html#ubuntu</a></li>\n</ol>\n<ul>\n<li>步骤一：安装导入 GPG 公钥时所需的几个依赖包（整个安装过程完成后可以随时删除它们）：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install --no-install-recommends wget gnupg ca-certificates</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤二：导入我们的 GPG 密钥：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<p>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/2.png\" alt=\"2.png\"></p>\n<ul>\n<li>步骤三：添加 OpenResty 官方 APT 仓库。对于 x86_64 或 amd64 系统，可以使用下面的命令：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;deb http://openresty.org/package/ubuntu $(lsb_release -sc) main&quot; \\</span><br><span class=\"line\">    | sudo tee /etc/apt/sources.list.d/openresty.list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>而对于 arm64 或 aarch64 系统，则可以使用下面的命令:（我在 M1 上运行的是该命令，上个命令会报错）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;deb http://openresty.org/package/arm64/ubuntu $(lsb_release -sc) main&quot; \\</span><br><span class=\"line\">    | sudo tee /etc/apt/sources.list.d/openresty.list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤四：更新 APT 索引：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>然后就可以像下面这样安装软件包，比如 <code>OpenResty</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install openresty</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤五：（可选）可以通过下面命令删除该包和对应的关联包：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install --no-install-recommends software-properties-common</span><br></pre></td></tr></table></figure>\n\n<p>成功安装 <code>OpenResty</code> :</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/3.png\" alt=\"3.png\"></p>\n<ol start=\"3\">\n<li>重新运行安装依赖脚本 （参考上面 1. ）</li>\n<li>接着运行 <code>LUAROCKS_SERVER=https://luarocks.cn</code> 命令安装依赖：</li>\n</ol>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/4.png\" alt=\"4.png\"></p>\n<p>运行下面命令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/5.png\" alt=\"5.png\"></p>\n<p>又出现错误提示了。。。接着运行下面命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install wget sudo unzip</span><br></pre></td></tr></table></figure>\n\n<p>接着我们重新运行一次：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -</span><br></pre></td></tr></table></figure>\n\n<p>然后我们继续运行安装依赖的命令：<code>LUAROCKS_SERVER=https://luarocks.cn make deps</code><br>终于成功了，哭了，坑确实太多了。</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/6.png\" alt=\"6.png\"></p>\n<p>大部分依赖已经成功安装好，但是又有新的错误提示了。<br>这里看起来是两个仓库未能成功克隆下来，没关系，先往后面运行试试：</p>\n<ol start=\"5\">\n<li>安装 APISIX 命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br><span class=\"line\">// 如果出现权限不足的提示，用 sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/7.png\" alt=\"7.png\"></p>\n<h2 id=\"安装-etcd\"><a href=\"#安装-etcd\" class=\"headerlink\" title=\"安装 etcd\"></a>安装 etcd</h2><h3 id=\"踩坑-etcd\"><a href=\"#踩坑-etcd\" class=\"headerlink\" title=\"踩坑 etcd\"></a>踩坑 etcd</h3><p>启动 APISIX 之前需要安装下 etcd，参考 <a href=\"https://apisix.apache.org/docs/apisix/2.10/install-dependencies/#ubuntu-1604--1804\">官方文档</a></p>\n<blockquote>\n<p>（由于该安装教程并不是针对 arm 写的，所以虽然成功安装了 etcd，但是未能成功将 etcd 运行起来，原因是因为默认使用的 x86 的二进制文件启动，所以无法运行。可以跳过该部分直接参考在 「docker 中运行 etcd 服务」部分）</p>\n</blockquote>\n<ul>\n<li>第一步运行：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二部运行：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf etcd-v3.4.13-linux-amd64.tar.gz &amp;&amp; \\    cd etcd-v3.4.13-linux-amd64 &amp;&amp; \\    sudo cp -a etcd etcdctl /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/8.png\" alt=\"8.png\"></p>\n<ul>\n<li>第三部启动 etcd 服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup etcd &amp;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/9.png\" alt=\"9.png\"></p>\n<p>然后我在后面运行 APISIX 时发现 etcd 报错了：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/10.png\" alt=\"10.png\"></p>\n<p>发现在 arm 上的 ubuntu 裸跑 etcd 坑太多了，各种各样的错误，后来决定还是跑 docker 吧～</p>\n<h3 id=\"在-docker-中运行-etcd-服务\"><a href=\"#在-docker-中运行-etcd-服务\" class=\"headerlink\" title=\"在 docker 中运行 etcd 服务\"></a>在 docker 中运行 etcd 服务</h3><ol>\n<li>安装 docker </li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install docker.io</span><br></pre></td></tr></table></figure>\n\n<p>Tip: docker 常用的命令：(无权限错误在命令前添加 sudo)</p>\n<ul>\n<li>查看所有容器列表 docker ps -a</li>\n<li>查看正在运行的容器列表 docker ps</li>\n<li>查看镜像列表 docker image list</li>\n<li>删除所有容器 docker container prune</li>\n<li>删除所有镜像 docker image prune -f -a<br>更多参考：<a href=\"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\">Docker 入门教程 - 阮一峰的网络日志</a></li>\n</ul>\n<ol start=\"2\">\n<li>拉取并运行 etcd</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name etcd -p 2379:2379 -e ETCD_UNSUPPORTED_ARCH=arm64 -e ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 -e ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379 gcr.io/etcd-development/etcd:v3.5.1-arm64</span><br></pre></td></tr></table></figure>\n\n<p>注意：该镜像需要开代理。<br>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/11.png\" alt=\"11.png\"></p>\n<p>验证是否运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/12.png\" alt=\"12.png\"></p>\n<p>这样，etcd 已经成功启动了。</p>\n<h2 id=\"启动-APISIX\"><a href=\"#启动-APISIX\" class=\"headerlink\" title=\"启动 APISIX\"></a>启动 APISIX</h2><p>所有的依赖项目已经准备完毕，现在我们可以启动 APISIX 拉～直接参考如何构建 APISIX <a href=\"https://apisix.apache.org/docs/apisix/how-to-build\">官方文档</a></p>\n<ul>\n<li>第一步安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make deps</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二部初始化依赖，启动 APISIX</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apisix init</span><br><span class=\"line\"></span><br><span class=\"line\">// start APISIX</span><br><span class=\"line\">apisix start</span><br><span class=\"line\"></span><br><span class=\"line\">// stop APISIX</span><br><span class=\"line\">apisix stop</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/13.png\" alt=\"13.png\"></p>\n<p>没有任何错误信息了，完美收工！</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>总体来说，有两个大坑是安装 APISIX 依赖部分和 arm 的 etcd 部分，etcd 部分可以直接用 docker 来解决，不过在拉取镜像的时候也会有一些坑，直接换别的镜像尝试就好。如果以后别人再问我用 M1 开发有什么建议吗，那我就建议：珍爱生命，远离 M1 😂 – 引自白泽平同学。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"APISIX-在-arm-版-ubuntu-构建踩坑日记\"><a href=\"#APISIX-在-arm-版-ubuntu-构建踩坑日记\" class=\"headerlink\" title=\"APISIX 在 arm 版 ubuntu 构建踩坑日记\"></a>APISIX 在 arm 版 ubuntu 构建踩坑日记</h1><p>2022-01-07</p>\n<p>本篇文章记录了通过源码构建 APISIX 的踩坑记录，ubuntu 环境使用的是 <a href=\"https://multipass.run/\">https://multipass.run/</a> 中的 Multipass 。</p>\n<h2 id=\"克隆源码\"><a href=\"#克隆源码\" class=\"headerlink\" title=\"克隆源码\"></a>克隆源码</h2><p>首先根据 <a href=\"https://apisix.apache.org/zh/docs/apisix/how-to-build#%E9%80%9A%E8%BF%87%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85\">官方文档</a> 安装 APISIX 源码仓库。并且进入项目文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd apisix-2.11.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装项目依赖\"><a href=\"#安装项目依赖\" class=\"headerlink\" title=\"安装项目依赖\"></a>安装项目依赖</h2><ol>\n<li>现在我们可以通过脚本一键安装项目所需要的依赖拉，在根目录下运行下面命令：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash utils/install-dependencies.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/1.png\" alt=\"1.png\"></p>\n<p>不出所料，没有成功跑完。通过错误提示我们知道，这里是未能成功安装 <code>OpenResty</code>。原因是默认没有 <code>arm 64</code> 平台的源。</p>\n<ol start=\"2\">\n<li>下面我们手动安装下 OpenResty：参考 <a href=\"https://openresty.org/cn/linux-packages.html#ubuntu\">https://openresty.org/cn/linux-packages.html#ubuntu</a></li>\n</ol>\n<ul>\n<li>步骤一：安装导入 GPG 公钥时所需的几个依赖包（整个安装过程完成后可以随时删除它们）：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install --no-install-recommends wget gnupg ca-certificates</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤二：导入我们的 GPG 密钥：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n\n<p>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/2.png\" alt=\"2.png\"></p>\n<ul>\n<li>步骤三：添加 OpenResty 官方 APT 仓库。对于 x86_64 或 amd64 系统，可以使用下面的命令：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;deb http://openresty.org/package/ubuntu $(lsb_release -sc) main&quot; \\</span><br><span class=\"line\">    | sudo tee /etc/apt/sources.list.d/openresty.list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>而对于 arm64 或 aarch64 系统，则可以使用下面的命令:（我在 M1 上运行的是该命令，上个命令会报错）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;deb http://openresty.org/package/arm64/ubuntu $(lsb_release -sc) main&quot; \\</span><br><span class=\"line\">    | sudo tee /etc/apt/sources.list.d/openresty.list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤四：更新 APT 索引：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<p>然后就可以像下面这样安装软件包，比如 <code>OpenResty</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install openresty</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>步骤五：（可选）可以通过下面命令删除该包和对应的关联包：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get -y install --no-install-recommends software-properties-common</span><br></pre></td></tr></table></figure>\n\n<p>成功安装 <code>OpenResty</code> :</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/3.png\" alt=\"3.png\"></p>\n<ol start=\"3\">\n<li>重新运行安装依赖脚本 （参考上面 1. ）</li>\n<li>接着运行 <code>LUAROCKS_SERVER=https://luarocks.cn</code> 命令安装依赖：</li>\n</ol>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/4.png\" alt=\"4.png\"></p>\n<p>运行下面命令即可：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/5.png\" alt=\"5.png\"></p>\n<p>又出现错误提示了。。。接着运行下面命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install wget sudo unzip</span><br></pre></td></tr></table></figure>\n\n<p>接着我们重新运行一次：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://raw.githubusercontent.com/apache/apisix/master/utils/linux-install-luarocks.sh -sL | bash -</span><br></pre></td></tr></table></figure>\n\n<p>然后我们继续运行安装依赖的命令：<code>LUAROCKS_SERVER=https://luarocks.cn make deps</code><br>终于成功了，哭了，坑确实太多了。</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/6.png\" alt=\"6.png\"></p>\n<p>大部分依赖已经成功安装好，但是又有新的错误提示了。<br>这里看起来是两个仓库未能成功克隆下来，没关系，先往后面运行试试：</p>\n<ol start=\"5\">\n<li>安装 APISIX 命令</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br><span class=\"line\">// 如果出现权限不足的提示，用 sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/7.png\" alt=\"7.png\"></p>\n<h2 id=\"安装-etcd\"><a href=\"#安装-etcd\" class=\"headerlink\" title=\"安装 etcd\"></a>安装 etcd</h2><h3 id=\"踩坑-etcd\"><a href=\"#踩坑-etcd\" class=\"headerlink\" title=\"踩坑 etcd\"></a>踩坑 etcd</h3><p>启动 APISIX 之前需要安装下 etcd，参考 <a href=\"https://apisix.apache.org/docs/apisix/2.10/install-dependencies/#ubuntu-1604--1804\">官方文档</a></p>\n<blockquote>\n<p>（由于该安装教程并不是针对 arm 写的，所以虽然成功安装了 etcd，但是未能成功将 etcd 运行起来，原因是因为默认使用的 x86 的二进制文件启动，所以无法运行。可以跳过该部分直接参考在 「docker 中运行 etcd 服务」部分）</p>\n</blockquote>\n<ul>\n<li>第一步运行：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/etcd-io/etcd/releases/download/v3.4.13/etcd-v3.4.13-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二部运行：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf etcd-v3.4.13-linux-amd64.tar.gz &amp;&amp; \\    cd etcd-v3.4.13-linux-amd64 &amp;&amp; \\    sudo cp -a etcd etcdctl /usr/bin/</span><br></pre></td></tr></table></figure>\n\n<p>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/8.png\" alt=\"8.png\"></p>\n<ul>\n<li>第三部启动 etcd 服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup etcd &amp;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/9.png\" alt=\"9.png\"></p>\n<p>然后我在后面运行 APISIX 时发现 etcd 报错了：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/10.png\" alt=\"10.png\"></p>\n<p>发现在 arm 上的 ubuntu 裸跑 etcd 坑太多了，各种各样的错误，后来决定还是跑 docker 吧～</p>\n<h3 id=\"在-docker-中运行-etcd-服务\"><a href=\"#在-docker-中运行-etcd-服务\" class=\"headerlink\" title=\"在 docker 中运行 etcd 服务\"></a>在 docker 中运行 etcd 服务</h3><ol>\n<li>安装 docker </li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install docker.io</span><br></pre></td></tr></table></figure>\n\n<p>Tip: docker 常用的命令：(无权限错误在命令前添加 sudo)</p>\n<ul>\n<li>查看所有容器列表 docker ps -a</li>\n<li>查看正在运行的容器列表 docker ps</li>\n<li>查看镜像列表 docker image list</li>\n<li>删除所有容器 docker container prune</li>\n<li>删除所有镜像 docker image prune -f -a<br>更多参考：<a href=\"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\">Docker 入门教程 - 阮一峰的网络日志</a></li>\n</ul>\n<ol start=\"2\">\n<li>拉取并运行 etcd</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker run -d --name etcd -p 2379:2379 -e ETCD_UNSUPPORTED_ARCH=arm64 -e ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379 -e ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379 gcr.io/etcd-development/etcd:v3.5.1-arm64</span><br></pre></td></tr></table></figure>\n\n<p>注意：该镜像需要开代理。<br>成功：</p>\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/11.png\" alt=\"11.png\"></p>\n<p>验证是否运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/12.png\" alt=\"12.png\"></p>\n<p>这样，etcd 已经成功启动了。</p>\n<h2 id=\"启动-APISIX\"><a href=\"#启动-APISIX\" class=\"headerlink\" title=\"启动 APISIX\"></a>启动 APISIX</h2><p>所有的依赖项目已经准备完毕，现在我们可以启动 APISIX 拉～直接参考如何构建 APISIX <a href=\"https://apisix.apache.org/docs/apisix/how-to-build\">官方文档</a></p>\n<ul>\n<li>第一步安装依赖</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make deps</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二部初始化依赖，启动 APISIX</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apisix init</span><br><span class=\"line\"></span><br><span class=\"line\">// start APISIX</span><br><span class=\"line\">apisix start</span><br><span class=\"line\"></span><br><span class=\"line\">// stop APISIX</span><br><span class=\"line\">apisix stop</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://guoqi-test-1307026204.cos.ap-shanghai.myqcloud.com/202108/13.png\" alt=\"13.png\"></p>\n<p>没有任何错误信息了，完美收工！</p>\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><p>总体来说，有两个大坑是安装 APISIX 依赖部分和 arm 的 etcd 部分，etcd 部分可以直接用 docker 来解决，不过在拉取镜像的时候也会有一些坑，直接换别的镜像尝试就好。如果以后别人再问我用 M1 开发有什么建议吗，那我就建议：珍爱生命，远离 M1 😂 – 引自白泽平同学。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}